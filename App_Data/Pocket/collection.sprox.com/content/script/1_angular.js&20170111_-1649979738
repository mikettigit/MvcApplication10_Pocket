setInterval(keepAlive, 60000);
function keepAlive() {
	jQuery.get('/action/heartbeat?noCache=' + new Date().getTime(), function (data) {
	});
}

var loggedInUser = JSON.parse(localStorage.getItem("user"));
if (loggedInUser != null && (loggedInUser.user == "VLADIMIR" || loggedInUser.user == "FRANCIS")) {
    (function(h,o,t,j,a,r){
        h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};
        h._hjSettings={hjid:225616,hjsv:5};
        a=o.getElementsByTagName('head')[0];
        r=o.createElement('script');r.async=1;
        r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;
        a.appendChild(r);
    })(window,document,'//static.hotjar.com/c/hotjar-','.js?sv=');
}

var ngContextMenu = angular.module('directive.contextMenu', []);

ngContextMenu.directive('context', [function () {
	return {
		restrict: 'A',
		scope: '@&',
		compile: function compile(tElement, tAttrs, transclude) {
			return {
				post: function postLink(scope, iElement, iAttrs, controller) {
					var ul = jQuery('#' + iAttrs.context),
						last = null;
					var x = 0;
					var y = 0;

					ul.css({'display': 'none'});

					jQuery(iElement).mousedown(function (event) {
						switch (event.which) {
							case 3:
								x = event.clientX;
								y = event.clientY;
								ul.css({
									position: "fixed",
									display: "block",
									left: event.clientX + 'px',
									top: event.clientY + 'px'
								});
								last = event.timeStamp;
								break;
						}
					});

					jQuery(document).mousedown(function (event) {
						var target = jQuery(event.target);

						switch (event.which) {
							case 1:
								if (target.parent()) {
									if (jQuery(target.parent()).parent()) {
										var contextMenuId = jQuery(target.parent()).parent().attr("id");
										if (contextMenuId == "actionsmenu") {
											event.target.click();
											if (last === event.timeStamp) {
												return;
											}

											ul.css({
												'display': 'none'
											});
										} else {
											ul.css({
												'display': 'none'
											});
										}
									} else {
										ul.css({
											'display': 'none'
										});
									}
								} else {
									ul.css({
										'display': 'none'
									});
								}
								break;
							case 3:
								event.target.click();
								if (!target.is(".popover") && !target.parents().is(".popover")) {
									if (last === event.timeStamp) {
										return;
									}

									ul.css({
										'display': 'none'
									});
								}
								break;
						}
					});

					jQuery(iElement).bind('contextmenu', function (event) {
						event.preventDefault();
						switch (event.which) {
							case 3:
								event.target.click();
								break;
						}
					});
				}
			};
		}
	};
}]);

var rdsApp;
//try {
//	angular.module("prospectApp");
//	rdsApp = angular.module('rdsApp', ['ngRoute', 'ngCookies', 'ngSanitize', 'angularUtils.directives.dirPagination', 'ui.bootstrap', 'translationModule', 'angularGrid', 'mgo-angular-wizard', 'angular-storage', 'directive.contextMenu', 'prospectApp']);
//} catch (e) {
//	console.log(e);
	
	rdsApp = angular.module('rdsApp', ['ngRoute', 'ngCookies', 'ngSanitize', 'angularUtils.directives.dirPagination', 'ui.bootstrap', 'angularGrid', 'mgo-angular-wizard', 'angular-storage', 'directive.contextMenu']);
//}

var modulesNeeded = [
    {service: "mail", module: "mailModule"},
    {service: "i18n", module: "translationModule"},
    {service: "customer", module: "customerModule"},
    {service: "order", module: "orderModule"},
    {service: "prospects", module: "prospectsModule"}
];

ModuleInjector.setRestCallData(site_code, language);
ModuleInjector.decorateAppWithModules("rdsApp", modulesNeeded);

rdsApp.run(function ($rootScope, $location) {
	var history = window.sessionStorage.getItem("history");
	if (history == null) {
		history = [];
	} else {
		history = history.split(",");
	}

	$rootScope.$on('$routeChangeSuccess', function () {
		var newPath = $location.path();
		var previousPath = history[history.length - 1];

		if (!$rootScope.clickedBack) {
			if (previousPath == undefined || previousPath.indexOf(newPath) == -1) {
				history.push($location.url());
				window.sessionStorage.setItem("history", history);
			}
		} else {
			$rootScope.clickedBack = false;
		}
	});

	$rootScope.back = function () {
		$rootScope.clickedBack = true;

		var prevUrl = history.length > 1 ? history[history.length - 2] : "/";
		history.splice(0, history.length - 3);
		$location.search('key', null);

		if (prevUrl == "/") {
			window.location.href = currentLocation;
		} else {
			$location.path(prevUrl);
		}
	};
});

// this is the important bit:
rdsApp.directive('datepickerPopup', function () {
	return {
		restrict: 'EAC',
		require: 'ngModel',
		link: function (scope, element, attr, controller) {
			//remove the default formatter from the input directive to prevent conflict
			controller.$formatters.shift();
		}
	}
});

rdsApp.directive('errSrc', function () {
	return {
		link: function (scope, element, attrs) {
			element.bind('error', function () {
                if (!attrs.processing) {
                    attrs.$set("processing", true);
                    if (attrs.src != attrs.errSrc) {
                        attrs.$set('src', attrs.errSrc);
                    }
                }
            });
		}
	}
});

rdsApp.directive('errSrcTwo', function () {
    return {
        link: function (scope, element, attrs) {
            element.bind('error', function () {
//                if (!attrs.processing) {
//                    attrs.$set("processing", true);
//                    if (attrs.src != attrs.errSrc) {
//                        attrs.$set('src', attrs.errSrcTwo);
//                    }
//                }
                if (!attrs.processing) {
                    attrs.$set("processing", true);
                    if (attrs.src != attrs.errSrcOne) {
                        console.log("looking for : " + attrs.errSrcOne);
                        var downloadingImage = new Image();
                        downloadingImage.onload = function(e) {
                            console.log(attrs.errSrcOne + " found");
                            attrs.$set('src', attrs.errSrcOne);
                    
                            if (attrs.isAgent == "false") {
                                e.target.style.display = 'none';
                            }
                        };
                        downloadingImage.onerror = function (e) {
                            console.log("Not found, setting no image found : " + attrs.errSrcTwo);
                            attrs.$set('src', attrs.errSrcTwo);
                    
                            if (attrs.isAgent == "false") {
                                e.target.style.display = 'none';
                            }
                        };
                    
                        downloadingImage.src = attrs.errSrcOne;
                    }
                }
            });
        }
    }
});

rdsApp.factory('focus', function ($timeout, $window) {
	return function (id) {
		// timeout makes sure that it is invoked after any other event has been triggered.
		// e.g. click events that need to run before the focus or
		// inputs elements that are in a disabled state but are enabled when those events
		// are triggered.
		$timeout(function () {
			var element = $window.document.getElementById(id);
			if (element)
				element.focus();
		});
	};
});

rdsApp.directive('focusOn', function () {
	return function (scope, elem, attr) {
		scope.$on(attr.focusOn, function (e) {
			elem[0].focus();
		});
	};
});

rdsApp.directive('focusMe', function ($timeout, $parse) {
	return {
		//scope: true,   // optionally create a child scope
		link: function (scope, element, attrs) {
			var model = $parse(attrs.focusMe);
			scope.$watch(model, function (value) {
				if (value === true) {
					$timeout(function () {
						element[0].focus();
					});
				}
			});
		}
	};
});

// We need this to set the background image on some elements
// See the banner in the catalog_detail.html
rdsApp.directive('backImg', function () {
	return function (scope, element, attrs) {
		var url = attrs.backImg;
		var extraAttr = attrs.extraAttr;
		element.css({
			'background-image': 'url(' + url + ')',
			'background-position': extraAttr
		});
	};
});
rdsApp.directive('backPos', function () {
	return function (scope, element, attrs) {
		var backPos = attrs.backPos;
		element.css({
			'background-position': backPos
		});
	};
});

rdsApp.filter('price', function (priceService) {
	return function (text) {
		if (text) {
			return priceService.format(text);
		} else {
			return undefined;
		}
	};
});

rdsApp.service("settingsService", function ($filter, $http, $modal, $cookieStore, $timeout, store, customerService) {
	var ss = this;
	ss.maxRemarklength = 500;
	ss.customers = [];
	ss.agents = null;
	ss.contacts = [];
	ss.files = [];
	ss.clientRequiredError = "";
	ss.seasonComparisons = [];
	
	ss.fetchingCustomer = false;
	ss.fetchingCustomers = false;

	ss.checkRemarkLengthAndTrim = function () {
		if (ss.settings.remarks.length >= ss.maxRemarklength) {
			ss.settings.remarks = ss.settings.remarks.substring(0, ss.maxRemarklength);
		}
	};

	ss.isUserLoggedIn = function () {
		//console.log("isUserLogged in:", typeof user !== "undefined" && typeof user.username !== "undefined");
		return typeof user !== "undefined" && typeof user.username !== "undefined";
	};

	ss.saveSettings = function () {
		if (ss.isUserLoggedIn()) {
			store.set(user.userCode + '_new_offer_settings', ss.settings);
		}
	};

	ss.saveContacts = function () {
		if (ss.isUserLoggedIn()) {
			store.set(user.userCode + 'new_offer_contacts', ss.contacts);
		}
	};

	ss.removeSettings = function () {
		if (ss.isUserLoggedIn()) {
			store.remove(user.userCode + '_new_offer_settings');
			store.remove(user.userCode + 'new_offer_contacts');
		}
	};

	/**
	 * Returns wheter the settings were restored or not !!
	 *
	 * @returns {boolean} if the settings were restored or not !
	 */
	ss.restoreSettings = function () {
		if (ss.isUserLoggedIn()) {
			var isRestored = false;
			var result = store.get(user.userCode + '_new_offer_settings');
			if (result != null && result != undefined) {
				ss.settings = result;
				isRestored |= true;
			}
			var contacts = store.get(user.userCode + 'new_offer_contacts');
			if (result != null && result != undefined) {
				ss.contacts = contacts;
				isRestored |= true;
			}
			return isRestored;
		}
	};

	ss.resetSettings = function () {
		if (ss.isUserLoggedIn()) {
			var result = ss.restoreSettings();
			if (!result) {
				ss.settings = {};
				ss.settings.mailExtras = {};
				ss.settings.mailExtras.filesToUpload = [];
				// used to track an update off an offer !!
				ss.settings.update = false;
				ss.settings.customer = {};
				if (ss.isAgent()) {
					ss.settings.priceCode = "E";
					ss.settings.priceCodeDiscount = "00";
				} else {
					ss.settings.priceCode = "C";
					ss.settings.priceCodeDiscount = "05";
				}
				ss.settings.collection = "PRIVATE";
				ss.settings.title = "";
				ss.settings.contact = {};
				ss.settings.contactsToMail = [];
				ss.settings.showPrice = true;
				ss.settings.showConditions = true;
				ss.settings.showRRP = false;
				ss.settings.showMargin = false;
				ss.settings.showSampleInfo = false;
				ss.settings.showStockInfo = false;
				ss.settings.showPriceCode = false;
				ss.settings.showPrices = false;
				ss.settings.calculateMargins = false;
				ss.settings.withSamples = false;
				ss.settings.showImages = true;
				ss.settings.showMOQ = false;
				ss.settings.samplesAgent = {};
				ss.settings.samplesPriceCode = "";
				ss.settings.samplesFeet = "1";
				ss.settings.samplesFollowUp = null;
				ss.settings.samplesFollowUpDate = "";
				ss.settings.samplesCorrectColor = null;
				ss.settings.offerType = "3";
				ss.settings.offerStatus = 10;
				ss.settings.remarks = "";
				ss.settings.itemsToShow = 96;
				ss.settings.sendOnlyToAgent = false;
				
				ss.settings.partialSending = false;
				ss.settings.directPicking = false;
				ss.settings.checkBeforeDelivery = false;
				ss.settings.originalPacking = "";


				var currentDate = new Date();
				currentDate.setMonth(currentDate.getMonth() + 1);
				ss.settings.validTill = $filter('date')(currentDate, 'dd/MM/yyyy');
			}

			if (ss.isAgent()) {
				var intervalOfferAgentCount = 0;
				var intervalOfferAgent = setInterval(function () {
					if(!!ss.agents) {
						clearInterval(intervalOfferAgent);
						angular.forEach(ss.agents, function (value, key) {
							if (value.agent == user.userCode) {
								ss.settings.offerAgent = value;
							}
						});
					} else {
						if(++intervalOfferAgentCount === 10) {
							clearInterval(intervalOfferAgent);
						}
					}
				}, 100);
			}

			// always reset how to mail the invoice -- Other option is other
			ss.settings.howToMail = "you";

			ss.saveSettings();
		}
	};

	ss.isValid = function () {
		var clientSelected = ss.isClientSelected();
		var contactSelected = ss.isContactSelected();
		return clientSelected && contactSelected;
	};

	ss.isClientSelected = function () {
		if (ss.settings.customer.id) {
			ss.clientRequiredError = "";
			return true;
		} else {
			//TODO translate ('CLIENT_REQUIRED')
			ss.clientRequiredError = "Client needs to be selected first.";
			return false;
		}
	};

	ss.isContactSelected = function () {
		if (typeof(ss.settings.contact) != "undefined" && ss.settings.contact.displayName) {
			ss.contactRequiredError = "";
			return true;
		} else {
			//TODO translate ('CLIENT_REQUIRED')
			ss.contactRequiredError = "Contact needs to be selected first.";
			return false;
		}
	};

	ss.isRetailClient = function () {
		if (ss.settings.customer.id) {
			return "PRIVATE" != ss.settings.customer.customerType;
		}
	};

	ss.isRetailWorldClient = function () {
		if (ss.settings.customer.id) {
			return ss.isRetailClient() && "C" == ss.settings.customer.environmentCode;
		}
	};

	ss.isRetailEuropeClient = function () {
		if (ss.settings.customer.id) {
			return ss.isRetailClient() && "E" == ss.settings.customer.environmentCode;
		}
	};

	ss.setContactsToMail = function () {
		ss.settings.contactsToMail = [];
		angular.forEach(ss.contacts, function (value, index) {
			if (value.selected) {
				ss.settings.contactsToMail.push(value);
			}
		});
	};

	ss.addNewContact = function (mailAddress) {
		var emailRegex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
		if(!emailRegex.test(mailAddress)) {
			return;
		}
		var contact = {selected: true, email: mailAddress, displayName: mailAddress};
		ss.contacts.push(contact);
	};

    ss.showCustomerMissingPopup = function () {
        var inst = $modal.open({
            templateUrl: '/customerMissing.inline',
            controller: 'PopupWindowController',
            size: 255
        });
    };

	ss.toggleMargin = function (cartService) {
        if (empty(ss.settings.customer)) {
            ss.showCustomerMissingPopup();
        } else {
		    ss.settings.showMargin = !ss.settings.showMargin;
            if (cartService && ss.settings.showMargin) {
                cartService.calculateTotalMargin(cartService.cart);
            }
        }
	};

	ss.isAgent = function () {
		return user.type == "A";
	};

	ss.showTrends = function () {
		switch (user.type) {
			case 'K':
				var customer = ss.settings.customer;
				if (typeof customer == "undefined" || customer == undefined || !customer.customerType) {
					return false;
				} else {
					return !ss.isRetailClient();
				}
				break;
			case 'L':
				return false;
			case 'A':
				return true;
		}
	};

	if (ss.isUserLoggedIn()) {
		ss.restoreSettings();

		ss.settings = $cookieStore.get("settings");
		if (!ss.settings || !ss.isAgent()) {
			ss.resetSettings();
		}

		if (ss.isAgent() && window.location.search.indexOf("noheartbeattrigger") == -1) {
			if (ss.customers.length == 0) {
				ss.fetchingCustomers = true;
                customerService.getCustomers().then(
                    function(data) {
                        ss.customers = data.data;
                        ss.fetchingCustomers = false;
                    },
                    function(error) {
                        customerService.sendErrorMail(error.data);
                        ss.fetchingCustomers = false;
                    }
                );
			}
			if(ss.seasonComparisons.length == 0) {
				$http.get('/action/' + site_code + '/' + language + '/settings/seasonComparisons').success(function(data) {
					ss.seasonComparisons = data;
				});
			}
		}

		if (!ss.isAgent() && window.location.search.indexOf("noheartbeattrigger") == -1) {
			$http.get('/action/' + site_code + '/' + language + '/profile/customer?timestamp=' + new Date().getTime()).success(function (data) {
				ss.settings.customer = data;
			});
		}

		if (window.location.search.indexOf("noheartbeattrigger") == -1) {
			$http.get('/action/' + site_code + '/' + language + '/profile/agents').success(function (data) {
				ss.agents = data;
			}).error(function(data) {
				customerService.sendErrorMail({subject: site_code + " - Error retrieving agents", message: JSON.stringify(data)});
			});

			$http.get('/action/' + site_code + '/' + language + '/settings/season').success(
				function (data) {
					ss.settings.season = data;
				}
			);
		}
	}

    ss.getCustomer = function() {
        if (!ss.isAgent()) {
            return $http.get('/action/' + site_code + '/' + language + '/profile/customer?timestamp=' + new Date().getTime());
        }
    };

	ss.customerChanged = function (customer, getContacts) {
		ss.isClientSelected();
		ss.contacts = [];
		$http.get('/action/' + site_code + '/' + language + '/profile/contacts/' + customer.number + '/' + customer.environmentCode + '?timestamp=' + new Date().getTime()).success(function (data) {
			ss.contacts = data;

			if (ss.contacts.length == 1) {
				ss.settings.contact = ss.contacts[0];
				ss.isValid();
			} else {
				for (var i = 0; i < data.length; i++) {
					if (typeof(ss.settings.contact) != "undefined" && data[i].contactSequence == ss.settings.contact.contactSequence) {
						ss.settings.contact = data[i];
					}
				}
			}

			if (getContacts) {
				ss.saveContacts();
				ss.saveSettings();
			}
		});
	};
	
	ss.findAndSetCustomer = function(customerId, environment) {
		ss.fetchingCustomer = true;
		
		angular.forEach(ss.customers, function (value, index) {
			if (value.id == customerId && value.environmentCode == environment) {
				ss.settings.customer = value;
				ss.customerChanged(value, true);
				ss.saveSettings();
				ss.fetchingCustomer = false;
			}
		});
		
		ss.fetchingCustomer = false;
	};

	ss.setCustomer = function (customerId, environment) {
		if(!this.isAgent())
			return;
		
		ss.fetchingCustomer = true;
		
		if (ss.customers.length == 0) {
            customerService.getCustomers().then(
                function(data) {
                    ss.customers = data.data;
                    
                    ss.findAndSetCustomer(customerId, environment);
                },
                function(error) {
                    customerService.sendErrorMail(error.data);
                    ss.fetchingCustomer = false;
                }
            );
		} else {
			ss.findAndSetCustomer(customerId, environment);
		}
	};

	ss.setOffer = function (offer) {
		ss.settings.mailExtras = {};
		ss.settings.mailExtras.filesToUpload = [];
		ss.settings.title = offer.title;
		ss.settings.showPrice = offer.showPrice;
		ss.settings.showConditions = offer.showConditions;
		
		ss.settings.samplesRequestedDate = offer.samplesRequestedDate;
		ss.settings.withSamples = (offer.hasRequestedSamples == true || offer.hasRequestedSamples == "Yes" || offer.hasRequestedSamples == 'Y' || !!ss.settings.samplesRequestedDate);
		ss.settings.showSampleInfo = (offer.showSamplesOnStock == true || offer.showSamplesOnStock == "Yes" || offer.showSamplesOnStock == 'Y' || ss.settings.withSamples);
		
		ss.settings.showRRP = offer.showRRP;
		ss.settings.showStockInfo = offer.showStock;
		ss.settings.showImages = offer.showImages;
		ss.settings.showMOQ = offer.showMOQ;

		ss.settings.season = offer.offerSeason;
		ss.settings.collection = offer.collection;
		ss.settings.priceCode = offer.priceCode;
		ss.settings.priceCodeDiscount = offer.priceCodeDiscount;

		ss.settings.validTill = offer.validDate;
		ss.settings.offerType = offer.offerType;

		ss.settings.samplesFeet = offer.samplesFeet;
		ss.settings.samplesFollowUp = offer.followUp;
		ss.settings.samplesFollowUpDate = offer.followUpDate;
		ss.settings.samplesCorrectColor = offer.showCorrectColor;
		ss.settings.update = true;
		ss.settings.refId = offer.refId;
		ss.settings.offerRefID = offer.refId;
		ss.settings.remarks = offer.remarks;
		if(!ss.settings.contact)
			ss.settings.contact = {};
		ss.settings.contact.contact = offer.contact;
		ss.settings.offerStatus = offer.offerStatus;
		ss.settings.orderDate = offer.orderDate;
		
		ss.settings.partialSending = offer.partialSending;
		ss.settings.directPicking = offer.directPicking;
		ss.settings.checkBeforeDelivery = offer.checkBeforeDelivery;
		ss.settings.originalPacking = offer.originalPacking;

		var intervalSamplesAgentCount = 0;
		var intervalSamplesAgent = setInterval(function () {
			if(!!ss.agents) {
				clearInterval(intervalSamplesAgent);
				angular.forEach(ss.agents, function (value, key) {
					if (value.agent == offer.samplesAgentCode) {
						ss.settings.samplesAgent = value;
					}
				});
			} else {
				if(++intervalSamplesAgentCount === 10) {
					clearInterval(intervalSamplesAgent);
					console.error("Could not set samples agent.");
				}
			}
		}, 100);

		var intervalOfferAgentCount = 0;
		var intervalOfferAgent = setInterval(function () {
			if(!!ss.agents) {
				clearInterval(intervalOfferAgent);
				angular.forEach(ss.agents, function (value, key) {
					if (value.agent == offer.offerAgentCode) {
						ss.settings.offerAgent = value;
					}
				});
			} else {
				if(++intervalOfferAgentCount === 10) {
					clearInterval(intervalOfferAgent);
					console.error("Could not set offer agent.");
				}
			}
		}, 100);
		
	};
});


rdsApp.service("priceService", function (settingsService) {
	this.showCartonsOnStock = false;

	this.format = function (text) {
		return parseFloat(text).toFixed(2).toString().replace('.', ',').replace(/\B(?=(\d{3})+(?!\d))/g, ".");
	};

	this.round = function (originalPrice, discount) {
		var price = (originalPrice * (100 - discount));
		if (price > 400) {
			price = Math.ceil(price / 10) * 10;
		} else if (price > 100) {
			price = Math.ceil(price / 5) * 5;
		}
		return price / 100;
	};

	this.getCurrency = function () {
		var currency = "";
		switch (settingsService.settings.priceCode) {
			case "E":
			case "X":
				currency = "€ ";
				break;
			case "C":
			case "Y":
				currency = "$ ";
				break;
			case "U":
				currency = "$ ";
				break;
			case "G":
				currency = "£ ";
				break;
			default:
				console.error("Unknown priceCode, setting it to E !");
				currency = "€ ";
				break;
		}
		return currency;
	};

	this.getCurrencyForPriceCode = function (priceCode) {
		var temp = settingsService.settings.priceCode;
		settingsService.settings.priceCode = priceCode;
		var result = this.getCurrency();
		settingsService.settings.priceCode = temp;
		return result;
	};

	this.calculatePrice = function (basePrices) {
		return this.calculatePriceWithPriceCode(basePrices, settingsService.settings.priceCode, settingsService.settings.priceCodeDiscount);
	};

	this.calculatePriceWithPriceCode = function (basePrices, priceCode, priceCodeDiscount) {
		basePrices.calculatedPrice = "";
		basePrices.calculatedValuta = "";

		if (priceCode && priceCodeDiscount && (priceCodeDiscount.length == 2)) {
			var price = 0.00;

			switch (priceCode) {
				case "E":
					price = this.round(basePrices.E00, priceCodeDiscount);
					break;
				case "C":
					price = this.round(basePrices.C00, priceCodeDiscount);
					break;
				case "U":
					price = this.round(basePrices.U00, priceCodeDiscount);
					break;
				case "G":
					price = this.round(basePrices.G00, priceCodeDiscount);
					break;
				case "X":
					price = this.round(basePrices.X00, priceCodeDiscount);
					break;
				case "Y":
					price = this.round(basePrices.Y00, priceCodeDiscount);
					break;
			}

			basePrices.unitPrice = price;
			basePrices.calculatedPrice = this.format(price);
			basePrices.calculatedValuta = this.getCurrency();
			if (!settingsService.settings.orderJustLoaded || basePrices.yourPrice == 0 || basePrices.yourPrice == 0.00) {
				basePrices.yourPrice = price;
			}

			return price;
		}
	};

	this.getPrice = function (basePrices) {
		var price = undefined;
		var valuta = undefined;
		if (settingsService.isAgent()) {
			this.calculatePrice(basePrices);
			price = basePrices.calculatedPrice;
			valuta = basePrices.calculatedValuta;
		} else {
			if (basePrices.price == 0) {
				price = this.format(basePrices.RRP);
				valuta = this.getCurrency() + " RRP";
			} else {
				price = this.format(basePrices.price);
				valuta = basePrices.currency;
			}
		}
		if (price && price != "NaN") {
			return price + " " + valuta;
		} else {
			return "";
		}

	};

	this.getRRP = function (basePrices) {
		var price = this.format(basePrices.RRP);
		if (price && price != "NaN") {
            if (this.getCurrency() != '€ ' && this.getCurrency() != '£ ') {
                return "€ " + price;
            } else {
			    return this.getCurrency() + price;
            }
		} else {
			return "";
		}
	};

	this.showPrice = function () {
		if (settingsService.isAgent()) {
			return settingsService.settings.showPrice;
		} else {
//			return basePrices.price != 0;
			return false;
		}
	};

	this.showRRP = function () {
		if (settingsService.isAgent()) {
			return settingsService.settings.showRRP;
		} else {
			return settingsService.isRetailEuropeClient();
		}
	};

	this.showCartonsOnStockRow = function (prepack) {
		if (prepack == undefined) {
			return prepack.quantityStock > 0;
		} else {
			return false;
		}
	};

	this.showCartonsOnStockHeader = function (article) {
		var result = false;
		for (var i = 0; i < article.colors.length; i++) {
			var color = article.colors[i];
			for (var j = 0; j < color.article.length; j++) {
				result |= color.article[j].quantityStock > 0;
			}
		}

		return result;
	};

	this.showCartonsOnStockHeaderOnDetail = function (articles) {
		var result = false;
		if (articles.items) {
			for (var i = 0; i < articles.items.length; i++) {
				result |= articles.items[i].quantityStock > 0;
			}
		}

		return result;
	};
});


rdsApp.filter('colorFilter', function (menuService, settingsService) {
	return function (input, query) {
		if (!query) return input;

		var result = [];

		var realCustomerKind = [];
		var realColor = [];
		var realGender = [];
		var realBrand = [];
        var realType = [];
		var realStyle = [];
		var realTrend = [];
		var realIcon = [];
		var realOutsoleType = [];
		var realSeason = [];
		var realSize = [];

		var showOnlyRetail = settingsService.isRetailClient();

		angular.forEach(query.color, function (value, key) {
			if (value) {
				realColor.push(key);
			}
		});
		angular.forEach(query.brand, function (value, key) {
			if (value) {
				realBrand.push(key);
			}
		});
		angular.forEach(query.gender, function (value, key) {
			if (value) {
				realGender.push(key);
			}
		});
		angular.forEach(query.trend, function (value, key) {
			if (value) {
				realTrend.push(key);
			}
		});
		angular.forEach(query.icon, function (value, key) {
			if (value) {
				realIcon.push(key);
			}
		});
		angular.forEach(query.season, function (value, key) {
			if (value) {
				realSeason.push(key);
			}
		});
		angular.forEach(query.style, function (value, key) {
			if (value) {
				realStyle.push(key);
			}
		});
		angular.forEach(query.typeOutsole, function (value, key) {
			if (value) {
				realOutsoleType.push(key);
			}
		});
		angular.forEach(query.customerKinds, function (value, key) {
			if (value) {
				realCustomerKind.push(key);
			}
		});

        angular.forEach(query.type, function (value, key) {
            if (value) {
                realType.push(key);
            }
        });
        
        angular.forEach(query.size, function (value, key) {
			if (value) {
				switch(key) {
					case "Size 36":
						realSize.push(36);
						realSize.push(40);
						break;
					case "Size 42":
						realSize.push(42);
						realSize.push(37);
						break;
				} 
				
			}
		});

		angular.forEach(input, function (article) {
			var colorOK = false;
			var trendOK = false;
			var brandOK = false;
			var genderOK = false;
            var typeOK = false;
			var styleOK = false;
			var typeOutsoleOK = false;
			var iconOK = false;
			var seasonOK = false;
			var customerKindOK = false;
			var retailOK = true;
			var sizeOK = true;

			if (realCustomerKind.length > 0) {
				angular.forEach(realCustomerKind, function (filterCol) {
					if (!customerKindOK) {
						if (filterCol === 'Retail') {
							customerKindOK = article.retail;
						} else if (filterCol === 'Private Label') {
							customerKindOK = !article.retail;
						}
					}
				});
			} else {
				customerKindOK = true;
			}
			if (realColor.length > 0) {
				angular.forEach(article.colorFilters, function (col) {
					if (!colorOK) {
						angular.forEach(realColor, function (filterCol) {
							if (col == filterCol) {
								colorOK = true;
							}
						});
					}
				});
			} else {
				colorOK = true;
			}
			if (realBrand.length > 0) {
				angular.forEach(realBrand, function (col) {
					if (!brandOK) {
						if (col == article.brand) {
							brandOK = true;
						}
					}
				});
			} else {
				brandOK = true;
			}
			if (realGender.length > 0) {
				angular.forEach(realGender, function (filterCol) {
					if (!genderOK) {
						if (article.gender.toUpperCase() == filterCol.toUpperCase()) {
							genderOK = true;
						}
					}
				});
			} else {
				genderOK = true;
			}
			if (realStyle.length > 0) {
				angular.forEach(realStyle, function (filterCol) {
					if (!styleOK) {
						if (article.style.toUpperCase() == filterCol.toUpperCase()) {
							styleOK = true;
						}
					}
				});
			} else {
				styleOK = true;
			}
			if (realOutsoleType.length > 0) {
				angular.forEach(realOutsoleType, function (filterCol) {
					if (!typeOutsoleOK) {
						if (article.typeOutsole.toUpperCase() == filterCol.toUpperCase()) {
							typeOutsoleOK = true;
						}
					}
				});
			} else {
				typeOutsoleOK = true;
			}
			if (realTrend.length > 0) {
				angular.forEach(article.trendFilters, function (tr) {
					if (!trendOK) {
						angular.forEach(realTrend, function (filterTr) {
							if (tr == filterTr) {
								trendOK = true;
							}
						});
					}
				});
			} else {
				trendOK = true;
			}
			if (realIcon.length > 0) {
				angular.forEach(article.iconFilters, function (icon) {
					if (!iconOK) {
						angular.forEach(realIcon, function (filterIcon) {
							if (icon == filterIcon) {
								iconOK = true;
							}
						});
					}
				});
			} else {
				iconOK = true;
			}
			if (realSeason.length > 0) {
				if (!seasonOK) {
					angular.forEach(realSeason, function (filterSeason) {
						if (article.seasonDescription == filterSeason) {
							seasonOK = true;
						}
					});
				}
			} else {
				seasonOK = true;
			}
            if (realType.length > 0) {
                if (!typeOK) {
                    angular.forEach(realType, function (filterType) {
                        if (article.articletype == filterType) {
                            typeOK = true;
                        }
                    });
                }
            } else {
                typeOK = true;
            }

			if (showOnlyRetail) {
				retailOK = article.retail;
			}
			
			if (realSize.length > 0) {
				angular.forEach(realSize, function (filterCol) {
					if (sizeOK) {
						if(filterCol < article.sizeFrom || filterCol > article.sizeTill) {
							sizeOK = false;
						}
					}
				});
			} else {
				sizeOK = true;
			}

			if (brandOK && colorOK && trendOK && iconOK && retailOK && seasonOK && genderOK && styleOK && typeOutsoleOK && customerKindOK && typeOK && sizeOK) {
				result.push(article);
			}
		});

		return result;
	};
});

rdsApp.filter('orderByArticles', function () {
	return function (articles, orderByProperty) {
		if (articles != undefined) {
			var result = articles.slice(0);

			result.sort(function (item1, item2) {
				var item1OrderValue = item1[orderByProperty];
				var item2OrderValue = item2[orderByProperty];

				if (isNaN(item1OrderValue)) {
					return item1OrderValue.localeCompare(item2OrderValue);
				} else {
					var value1 = parseInt(item1OrderValue);
					var value2 = parseInt(item2OrderValue);
					return value2 - value1;
				}
			});
		}

		return result;
	};
});

rdsApp.filter('customerFilter', function () {
	return function (customers, filterText) {
		if (customers != undefined) {
			var result = [];

			for (var i = 0; i < customers.length; i++) {
				if (customers[i].label.toUpperCase().indexOf(filterText.toUpperCase()) != -1) {
					result.push(customers[i]);
				}
			}
		}

		return result;
	};
});

rdsApp.filter('removeSpaces', function () {
	return function (input) {
		return input.replace(/ /g, "_");
	}
});
