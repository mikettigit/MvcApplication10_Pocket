// Used to remove the duplicates from a merged array.
Array.prototype.unique = function () {
	var a = this.concat();
	for (var i = 0; i < a.length; ++i) {
		for (var j = i + 1; j < a.length; ++j) {
			if (a[i].id) {
				if (a[i].id == a[j].id) {
					a.splice(j--, 1);
				}
			} else if (a[i] == a[j]) {
				a.splice(j--, 1);
			}
		}
	}
	return a;
};

var cs;
var ss;

function saveCartAndSettings(elementId) {
	cs.saveCartToSessionStorage();
	ss.saveSettings();
	distributeCartAndSettings(cs.cart, ss.settings, user.username);

	document.getElementById(elementId).setAttribute("href", otherLocation);
	document.getElementById(elementId).click();
}

rdsApp.controller('HomeController', function ($scope, homeService) {

	$scope.getHomeService = function () {
		return homeService;
	};

	if (homeService.styles.length == 0 && site_code == 'SPROX' && !homeService.stylesLoading) {
		homeService.stylesLoading = true;
		homeService.getStyles().then(
			function (data) {
				homeService.styles = data.data;
				homeService.stylesLoading = false;
			},
			function (error) {
				console.log("Error getting styles", error);
			}
		);
	}

	if (homeService.fashion.length == 0 && site_code == 'SPROX' && !homeService.fashionLoading) {
		console.log("Loading sprox fashion");
		homeService.fashionLoading = true;
		homeService.getAttributeMember('SPROX', 'sprox_main/[[WEEKNUMBER]]_fashion').then(
			function (data) {
				homeService.fashion = data.data;
				homeService.fashionLoading = false;
			},
			function (error) {
				console.log("Error getting fashion", error);
			}
		);
	}

	if (homeService.leomilBoys.length == 0 && site_code == 'LEOMIL' && !homeService.leomilBoysLoading) {
		homeService.leomilBoysLoading = true;
		homeService.getAttributeMember('LEOMIL', 'leomil_main/boys').then(
			function (data) {
				homeService.leomilBoys = data.data;
				homeService.leomilBoysLoading = false;
			},
			function (error) {
				console.log("Error getting leomil boys", error);
			}
		);
	}

	if (homeService.leomilGirls.length == 0 && site_code == 'LEOMIL' && !homeService.leomilGirlsLoading) {
		homeService.leomilGirlsLoading = true;
		homeService.getAttributeMember('LEOMIL', 'leomil_main/girls').then(
			function (data) {
				homeService.leomilGirls = data.data;
				homeService.leomilGirlsLoading = false;
			},
			function (error) {
				console.log("Error getting leomil girls", error);
			}
		);
	}

	if (homeService.ladies.length == 0 && site_code == 'SPROX' && !homeService.ladiesLoading) {
		console.log("Loading sprox ladies");
		homeService.ladiesLoading = true;
		homeService.getGenre("SPROX", "ladies").then(
			function (data) {
				homeService.ladies = data.data;
				homeService.ladiesLoading = false;
			},
			function (error) {
				console.log("Error getting ladies", error);
			}
		);
	}

	if (homeService.girls.length == 0 && site_code == 'SPROX' && !homeService.girlsLoading) {
		console.log("Loading sprox girls");
		homeService.girlsLoading = true;
		homeService.getGenre("SPROX", "girls").then(
			function (data) {
				homeService.girls = data.data;
				homeService.girlsLoading = false;
			},
			function (error) {
				console.log("Error getting girls", error);
			}
		);
	}

	if (homeService.men.length == 0 && site_code == 'SPROX' && !homeService.menLoading) {
		console.log("Loading sprox men");
		homeService.menLoading = true;
		homeService.getGenre("SPROX", "men").then(
			function (data) {
				homeService.men = data.data;
				homeService.menLoading = false;
			},
			function (error) {
				console.log("Error getting men", error);
			}
		);
	}

	if (homeService.boys.length == 0 && site_code == 'SPROX' && !homeService.boysLoading) {
		console.log("Loading sprox boys");
		homeService.boysLoading = true;
		homeService.getGenre("SPROX", "boys").then(
			function (data) {
				homeService.boys = data.data;
				homeService.boysLoading = false;
			},
			function (error) {
				console.log("Error getting boys", error);
			}
		);
	}

	if (homeService.leomilBestBoys.length == 0 && site_code == 'LEOMIL' && !homeService.leomilBestBoysLoading) {
		homeService.leomilBestBoysLoading = true;
		homeService.getGenre("LEOMIL", "boys").then(
			function (data) {
				homeService.leomilBestBoys = data.data.splice(0, 5);
				homeService.leomilBestBoysLoading = false;
			},
			function (error) {
				console.log("Error getting leomil best boys", error);
			}
		);
	}

	if (homeService.leomilBestGirls.length == 0 && site_code == 'LEOMIL' && !homeService.leomilBestGirlsLoading) {
		homeService.leomilBestGirlsLoading = true;
		homeService.getGenre("LEOMIL", "girls").then(
			function (data) {
				homeService.leomilBestGirls = data.data.splice(0, 5);
				homeService.leomilBestGirlsLoading = false;
			},
			function (error) {
				console.log("Error getting leomil best girls", error);
			}
		);
	}
});

rdsApp.service('homeService', function ($http) {
	var hs = this;

	hs.styles = [];
	hs.ladies = [];
	hs.girls = [];
	hs.men = [];
	hs.boys = [];
	hs.fashion = [];

	hs.leomilBoys = [];
	hs.leomilGirls = [];
	hs.leomilBestBoys = [];
	hs.leomilBestGirls = [];

	hs.stylesLoading = false;
	hs.ladiesLoading = false;
	hs.girlsLoading = false;
	hs.menLoading = false;
	hs.boysLoading = false;
	hs.fashionLoading = false;


	hs.getStyles = function () {
		return $http({
			method: "GET",
			url: "/action/SPROX/en/style",
			headers: {'Content-Type': "application/json"}
		});
	};

	hs.getGenre = function (site, genre) {
		return $http({
			method: "GET",
			url: "/action/" + site + "/en/article/getBestsellers/" + genre,
			headers: {'Content-Type': "application/json"}
		});
	};

	hs.getAttributeMember = function (site, attribute) {
		return $http({
			method: "GET",
			url: "/action/" + site + "/en/article/findByAttributeMember/" + attribute,
			headers: {'Content-Type': "application/json"}
		});
	};

});

rdsApp.service('drupalService', function (cartService, settingsService) {

	cs = cartService;
	ss = settingsService;

	this.getImagePath = function () {
		return "/sites/all/themes/" + Drupal.settings.ajaxPageState.theme;
	};

	// Set the logo url to go to leomil when on sprox and vice versa
	if (document.getElementById("gotoLicense") != null) {
		document.getElementById("gotoLicense").setAttribute("href", "javascript:saveCartAndSettings('gotoLicense')");
	} else if (document.getElementById("gotoSprox") != null) {
		document.getElementById("gotoSprox").setAttribute("href", "javascript:saveCartAndSettings('gotoSprox')");
	}

});


rdsApp.service("filterService", function ($http, $location, $filter) {
	var key_filter_color = "filter_color";
	var key_filter_trends = "filter_trends";
	var key_filter_icons = "filter_icons";
	// var key_filter_brands = "filter_brands";

	var fs = this;

	fs.isLadies = function () {
		return $location.search().cat2 == 'Ladies';
	};

	// Accordions
	fs.filterTabs = [];
	fs.filterTabs.collections = true;
	fs.filterTabs.customerKinds = true;
	fs.filterTabs.brands = true;
	fs.filterTabs.styles = true;
	fs.filterTabs.outsoles = true;
	fs.filterTabs.colors = true;
	fs.filterTabs.features = false;
	fs.filterTabs.seasons = true;
	fs.filterTabs.trends = true;
	fs.filterTabs.types = true;
	fs.filterTabs.sizes = true;

	fs.typeOutsoles = [];
	fs.genders = [];
	fs.styles = [];
	fs.seasons = [];
	fs.customerKinds = [];
	fs.brands = [];
	fs.types = [];
	fs.sizes = [];
	fs.selectedFilters = [];

	fs.saveToSessionStorage = function (key, data) {
		window.sessionStorage.setItem(key, JSON.stringify(data));
	};

	fs.restoreFromSessionStorage = function (key) {
		var result = window.sessionStorage.getItem(key);
		if (result != undefined && result != null) {
			return JSON.parse(result);
		}
		return [];
	};

	fs.colors = fs.restoreFromSessionStorage(key_filter_color);
	fs.trends = fs.restoreFromSessionStorage(key_filter_trends);
	fs.icons = fs.restoreFromSessionStorage(key_filter_icons);

	var timestamp = new Date().getTime();
	if (fs.colors.length == 0) {
		$http.get('/action/' + site_code + '/' + language + '/filter/color').then(function (response) {
			fs.colors = response.data;
			fs.saveToSessionStorage(key_filter_color, response.data);
		});
	}

	if (fs.trends.length == 0) {
		$http.get('/action/' + site_code + '/' + language + '/filter/trend').then(function (response) {
			fs.trends = response.data;
			fs.saveToSessionStorage(key_filter_trends, response.data);
		});
	}

	if (fs.icons.length == 0) {
		$http.get('/action/' + site_code + '/' + language + '/filter/icon').then(function (response) {
			fs.icons = response.data;
			fs.saveToSessionStorage(key_filter_icons, response.data);
		});
	}

	// if(fs.brands.length === 0){
	// http.get('/action/' + site_code + '/' + language +
	// '/filter/brand?timestamp=' + timestamp).then(function (response) {
	// fs.brands = response.data;
	// fs.saveToSessionStorage(key_filter_brands, response.data);
	// });
	// }


	fs.recalculateFilters = function (articleService, blocks) {
		var data = $filter('colorFilter')(articleService.articles, fs.filters);
		fs.setFilters(data, blocks);
	};

	fs.setFilters = function (data, blocks) {
		if (blocks !== undefined && blocks.indexOf("colorsReset") != -1) {
			angular.forEach(fs.colors, function (color) {
				color.used = false;
			});
		}
		if (blocks !== undefined && blocks.indexOf("trendsReset") != -1) {
			angular.forEach(fs.trends, function (trend) {
				trend.used = false;
			});
		}
		if (blocks !== undefined && blocks.indexOf("iconsReset") != -1) {
			angular.forEach(fs.icons, function (icon) {
				icon.used = false;
			});
		}

		var value = fs.extractFilter(null, "Private Label");
		if (value != null) fs.customerKinds.push(value);
		value = fs.extractFilter(null, "Retail");
		if (value != null) fs.customerKinds.push(value);

		value = fs.extractFilter(null, "Size 36");
		if (value != null) fs.sizes.push(value);
		value = fs.extractFilter(null, "Size 42");
		if (value != null) fs.sizes.push(value);


		angular.forEach(data, function (article) {
			value = fs.extractFilter(article, "seasonDescription");
			if (value != null) fs.seasons.push(value);
			value = fs.extractFilter(article, "style");
			if (value != null) fs.styles.push(value);
			value = fs.extractFilter(article, "typeOutsole");
			if (value != null) fs.typeOutsoles.push(value);
			value = fs.extractFilter(article, "gender");
			if (value != null) fs.genders.push(value);
			value = fs.extractFilter(article, "brand");
			if (value != null) fs.brands.push(value);
			value = fs.extractFilter(article, "articletype");
			if (value != null) fs.types.push(value);


			angular.forEach(article.colorFilters, function (cf) {
				angular.forEach(fs.colors, function (color) {
					if (color.id == cf) {
						color.used = true;
					}
				});

			});
			angular.forEach(article.trendFilters, function (ct) {
				angular.forEach(fs.trends, function (trend) {
					if (trend.id == ct) {
						trend.used = true;
					}
				});
			});
			angular.forEach(article.iconFilters, function (ct) {
				angular.forEach(fs.icons, function (icon) {
					if (icon.id == ct) {
						icon.used = true;
					}
				});
			});
		});

		fs.customerKinds = fs.customerKinds.unique();
		fs.brands = fs.brands.unique();
		fs.seasons = fs.seasons.unique();
		fs.genders = fs.genders.unique();
		fs.styles = fs.styles.unique();
		fs.types = fs.types.unique();
		fs.typeOutsoles = fs.typeOutsoles.unique();
		fs.sizes = fs.sizes.unique();

		fs.showOutsoleFilter = fs.typeOutsoles.length > 1;
	};

	fs.showColors = function () {
		var count = 0;
		for (var i = 0; i < fs.colors.length; i++) {
			if (fs.colors[i].used) {
				count += 1;
			}
		}

		return count > 1;
	};

	fs.showFeatures = function () {
		var count = 0;
		for (var i = 0; i < fs.icons.length; i++) {
			if (fs.icons[i].used) {
				count += 1;
			}
		}

		return count > 1;
	};

	fs.showTrends = function () {
		var count = 0;
		for (var i = 0; i < fs.trends.length; i++) {
			if (fs.trends[i].used) {
				count += 1;
			}
		}

		return count > 1;
	};

	fs.removeFilter = function (filter, articleService) {
		if (fs.filters.customerKinds[filter.id] != undefined) {
			fs.filters.customerKinds[filter.id] = !fs.filters.customerKinds[filter.id];
		}
		if (fs.filters.color[filter.id] != undefined) {
			fs.filters.color[filter.id] = !fs.filters.color[filter.id];
		}
		if (fs.filters.trend[filter.id] != undefined) {
			fs.filters.trend[filter.id] = !fs.filters.trend[filter.id];
		}
		if (fs.filters.season[filter.id] != undefined) {
			fs.filters.season[filter.id] = !fs.filters.season[filter.id];
		}
		if (fs.filters.icon[filter.id] != undefined) {
			fs.filters.icon[filter.id] = !fs.filters.icon[filter.id];
		}
		if (fs.filters.style[filter.id] != undefined) {
			fs.filters.style[filter.id] = !fs.filters.style[filter.id];
		}
		if (fs.filters.gender[filter.id] != undefined) {
			fs.filters.gender[filter.id] = !fs.filters.gender[filter.id];
		}
		if (fs.filters.brand[filter.id] != undefined) {
			fs.filters.brand[filter.id] = !fs.filters.brand[filter.id];
		}
		if (fs.filters.type[filter.id] != undefined) {
			fs.filters.type[filter.id] = !fs.filters.type[filter.id];
		}
		if (fs.filters.typeOutsole[filter.id] != undefined) {
			fs.filters.typeOutsole[filter.id] = !fs.filters.typeOutsole[filter.id];
		}
		if (fs.filters.size[filter.id] != undefined) {
			fs.filters.size[filter.id] = !fs.filters.size[filter.id];
		}

		fs.setSelectedFilters(filter, articleService);
	};

	fs.search = function () {
		fs.resetFilters(false);
		window.location = "/" + language + "/catalog#/list?search=" + fs.filters.search.join(";");
	};

	fs.initFilters = function () {
		var savedSearchText = "";
		if (!fs.filters) {
			fs.filters = {};
			fs.filters.customerKinds = {};
			fs.filters.color = {};
			fs.filters.trend = {};
			fs.filters.gender = {};
			fs.filters.type = {};
			fs.filters.brand = {};
			fs.filters.typeOutsole = {};
			fs.filters.style = {};
			fs.filters.icon = {};
			fs.filters.season = {};
			fs.filters.search = [];
			fs.filters.size = {};
		}
	};

	fs.resetFilters = function (resetSearch) {
		var savedSearchText = [];
		if (fs.filters) {
			savedSearchText = fs.filters.search;
		}

		fs.filters = {};
		fs.filters.customerKinds = {};
		fs.filters.color = {};
		fs.filters.trend = {};
		fs.filters.gender = {};
		fs.filters.type = {};
		fs.filters.brand = {};
		fs.filters.typeOutsole = {};
		fs.filters.style = {};
		fs.filters.icon = {};
		fs.filters.season = {};
		fs.filters.size = {};
		fs.selectedFilters = [];

		if (resetSearch) {
			fs.filters.search = [];
		} else {
			fs.filters.search = savedSearchText;
		}
	};

	fs.resetAndClick = function (l1, l2, l3, l4) {
		var link = this.getLink(l1, l2, l3, l4);
		this.filters = {};
		this.filters.customerKinds = {};
		this.filters.color = {};
		this.filters.trend = {};
		this.filters.season = {};
		this.filters.gender = {};
		this.filters.type = {};
		this.filters.brand = {};
		this.filters.style = {};
		this.filters.typeOutsole = {};
		this.filters.icon = {};
		this.filters.search = [];
		this.filters.size = {};

		this.currentPage = 1;
		if (window.location.pathname.indexOf("/" + language + "/catalog")) {
			window.location.href = link;
		} else {
			var loc = {};
			if (l1) {
				loc.cat1 = (l1.category1);
				if (l2) {
					loc.cat2 = (l2.category2);
					if (l3) {
						loc.cat3 = (l3.category3);
						if (l4) {
							loc.cat4 = (l4.category4);
						}
					}
				}
			}

			$location.search(loc);
			$location.path("/list");
		}
	};

	fs.setSelectedFilters = function (filter, articleService) {
		var result = fs.isFilterInArrayBasedOnId(fs.selectedFilters, filter);
		var valueIsPresent = result.valueIsPresent;
		var valueIndex = result.valueIndex;

		if (!valueIsPresent) {
			fs.selectedFilters.push(filter);
		} else {
			fs.selectedFilters.splice(valueIndex, 1);
		}
		fs.selectedFilters = fs.selectedFilters.unique();

		var blocks = fs.getBlocksToRecalculate();
		for (var i = 0; i < blocks.length; i++) {
			eval("fs." + blocks[i] + " = []");
		}
		fs.recalculateFilters(articleService, blocks);
	};

	fs.getBlocksToRecalculate = function () {
		var blocks = [];

		if (!fs.areFiltersFromBlock(fs.customerKinds, fs.selectedFilters)) {
			blocks.push("customerKinds");
		}
		if (!fs.areFiltersFromBlock(fs.brands, fs.selectedFilters)) {
			blocks.push("brands");
		}
		if (!fs.areFiltersFromBlock(fs.genders, fs.selectedFilters)) {
			blocks.push("genders");
		}
		if (!fs.areFiltersFromBlock(fs.styles, fs.selectedFilters)) {
			blocks.push("styles");
		}
		if (!fs.areFiltersFromBlock(fs.typeOutsoles, fs.selectedFilters)) {
			blocks.push("typeOutsoles");
		}
		if (!fs.areFiltersFromBlock(fs.seasons, fs.selectedFilters)) {
			blocks.push("seasons");
		}
		if (!fs.areFiltersFromBlock(fs.colors, fs.selectedFilters)) {
			blocks.push("colorsReset");
		}
		if (!fs.areFiltersFromBlock(fs.trends, fs.selectedFilters)) {
			blocks.push("trendsReset");
		}
		if (!fs.areFiltersFromBlock(fs.icons, fs.selectedFilters)) {
			blocks.push("iconsReset");
		}
		if (!fs.areFiltersFromBlock(fs.types, fs.selectedFilters)) {
			blocks.push("typesReset");
		}

		return blocks;
	};

	fs.resetAvailableFilters = function () {
		fs.styles = [];
		fs.typeOutsoles = [];
		fs.customerKinds = [];
		fs.seasons = [];
		fs.genders = [];
		fs.brands = [];
		fs.types = [];
		fs.sizes = [];
	};

	fs.areFiltersFromBlock = function (filterArray, filters) {
		var results = 0;
		angular.forEach(filterArray, function (value, index) {
			angular.forEach(filters, function (filter, index2) {
				if (value.id == filter.id) {
					results += 1;
				}
			});
		});
		return results > 0;
	};

	fs.isFilterInArrayBasedOnId = function (filterArray, filter) {
		var result = {valueIsPresent: false, valueValid: false};

		if (filter !== undefined && filterArray.length > 0) {
			angular.forEach(filterArray, function (value, index) {
				if (value.id == filter.id) {
					result.valueIsPresent = true;
					result.valueValid = true;
					result.valueIndex = index;
				}
			});
		}
		return result;
	};

	fs.extractFilter = function (article, property) {
		if (article != null) {
			var filterValue = eval("article." + property);
			if (filterValue != undefined && filterValue != null && filterValue != "") {
				var value = {};
				value.id = filterValue;
				value.used = true;
				value.translations = [];
				var translation = {};
				translation.description = filterValue;
				value.translations.push(translation);
				return value;
			}
		} else {
			var value1 = {};
			value1.id = property;
			value1.used = true;
			value1.translations = [];
			var translation1 = {};
			translation1.description = property;
			value1.translations.push(translation1);
			return value1;
		}
		return null;
	};

});

rdsApp.controller('FilterController', ['$scope', 'filterService', 'articleService', function ($scope, filterService, articleService) {
	if (!!filterService.filters) {
		if (filterService.filters.search.length === 0)
			filterService.filters.search.push("");

		$scope.searchText = filterService.filters.search.join("; ");
	}

	$scope.getFilterService = function () {
		return filterService;
	};

	$scope.getArticleService = function () {
		return articleService;
	};

	$scope.addSelection = function ($item) {
		filterService.filters.search[filterService.filters.search.length - 1] = $item;
		$scope.searchText = "";
		for (var i = 0; i < filterService.filters.search.length; i++) {
			$scope.searchText += filterService.filters.search[i] + "; ";
		}
	};

	$scope.updateSearchFilter = function (newValue) {
		filterService.filters.search = newValue.split(";");
	};

	$scope.search = function () {
		$scope.searchText = "";
		filterService.search();
	};

	$scope.getCurrentSearchTerm = function (terms) {
		var termsArray = terms.split(";");
		return termsArray[termsArray.length - 1].trim();
	};
}]);


rdsApp.service("menuService", ['$http', 'drupalService', function ($http, drupalService) {
	var ms = this;
	ms.catalogs = [];
	ms.portfolioItems = [];
	ms.breadCrumbs = {};

	ms.popupVisible = false;

	ms.cat1 = undefined;
	ms.cat2 = undefined;
	ms.cat3 = undefined;
	ms.cat4 = undefined;

	this.getCatalogs = function () {
		$http.get('/action/' + site_code + '/' + language + '/menu/data?timestamp=' + new Date().getTime()).success(function (data) {
			ms.catalogs = data;
			ms.selectMenu(ms.cat1, ms.cat2, ms.cat3, ms.cat4);
		});
	};

	this.resetBreadCrumbs = function () {
		ms.breadCrumbs = {};
	};

	this.selectMenu = function (cat1, cat2, cat3, cat4, articleName) {
		ms.breadCrumbs.cat1 = cat1;
		ms.breadCrumbs.cat2 = cat2;
		ms.breadCrumbs.cat3 = cat3;
		ms.breadCrumbs.cat4 = cat4;
		ms.breadCrumbs.articleName = articleName;
		if (ms.catalogs) {
			jQuery.each(ms.catalogs, function (i, l1) {
				l1.activeInTree = (l1.category1 == cat1);
				jQuery.each(l1.items, function (i, l2) {
					l2.activeInTree = (l2.category2 == cat2);
					jQuery.each(l2.items, function (i, l3) {
						l3.activeInTree = (l3.category3 == cat3);
						jQuery.each(l3.items, function (i, l4) {
							l4.activeInTree = (l4.category4 == cat4);
						});
					});
				});
			});
		}
		ms.cat1 = cat1;
		ms.cat2 = cat2;
		ms.cat3 = cat3;
		ms.cat4 = cat4;
	};

	ms.getBannerBrand = function () {
		var brand = undefined;
		if (ms.cat1 == 'License Brands') {
			brand = ms.cat2;
		} else if (ms.cat2 == 'License Brands') {
			brand = ms.cat3;
		}
		if (brand) {
			brand = brand.replace(/\s/g, '').toUpperCase();
		}
		return brand;
	};

	ms.getBannerBackgroundUrl = function () {
		if (ms.getBannerBrand() != undefined) {
			return drupalService.getImagePath() + "/img/banner/" + ms.getBannerBrand() + "-BG.JPG";
		}
	};

	ms.getBannerInnerBackgroundUrl = function () {
		if (ms.getBannerBrand() != undefined) {
			return drupalService.getImagePath() + "/img/banner/" + ms.getBannerBrand() + ".PNG";
		}
	};

	// ms.getPortfolioItems = function () {
	// if (ms.portfolioItems.length <= 0) {
	//
	// }
	// //if (ms.catalogs <= 0) {
	// // ms.getCatalogs();
	// //}
	//
	// var portfolioItems = ms.catalogs[1].items;
	// var cleanedItems = [];
	// angular.forEach(portfolioItems, function (item) {
	// var cleanItem = {};
	// cleanItem.displayName = item.category2;
	// cleanItem.link = "#list?a=a&cat1=Portfolio&cat2=" + item.category2 +
	// "&cat3=All styles...&resetFilters=true";
	// cleanItem.imageLink = "/sites/all/themes/sprox2/img/portfolio/" +
	// item.category2.toLowerCase() + ".jpg";
	// cleanedItems.push(cleanItem);
	// });
	//
	// ms.portfolioItems = cleanedItems;
	// }
	//
	// return ms.portfolioItems;
	// };

}]);

rdsApp.service('orderService', ['$http', '$log', '$modal', 'printOptionService', 'settingsService', function ($http, $log, $modal, printOptionService, settingsService) {
	var os = this;
	os.offerInfoValidError = [];
	os.selectedRow = undefined;

	// printOptionService.getPrintOptions();

	os.isOfferInfoValid = function () {
		var valid = true;
		os.offerInfoValidError = [];
		if (!(settingsService.settings.title && settingsService.settings.title != undefined && settingsService.settings.title != null)) {
			os.offerInfoValidError.push("Title is required.");
			valid = false;
		}

		if (!(settingsService.settings.validTill && settingsService.settings.validTill != undefined && settingsService.settings.validTill != null)) {
			os.offerInfoValidError.push("Valid till date is required.");
			valid = false;
		}

		if (!(settingsService.settings.season && settingsService.settings.season != undefined && settingsService.settings.season != null)) {
			os.offerInfoValidError.push("Season is required.");
			valid = false;
		}

		if (!(settingsService.settings.offerAgent && settingsService.settings.offerAgent != undefined && settingsService.settings.offerAgent != null)) {
			os.offerInfoValidError.push("Offer agent is required.");
			valid = false;
		}

		if (settingsService.settings.showPrice && !(settingsService.settings.priceCodeDiscount && settingsService.settings.offerAgent != undefined && settingsService.settings.offerAgent != null)) {
			os.offerInfoValidError.push("Pricecode is required.");
			valid = false;
		}

		if (settingsService.settings.showSampleInfo) {
			if (!settingsService.settings.samplesAgent || !settingsService.settings.samplesAgent.name) {
				os.offerInfoValidError.push("Sample details: Agent is required.");
				valid = false;
			}

			if (!settingsService.settings.samplesFeet) {
				os.offerInfoValidError.push("Sample details: Feet/pieces is required.");
				valid = false;
			}

			if (settingsService.settings.samplesCorrectColor == null || typeof(settingsService.settings.samplesCorrectColor) == "undefined") {
				os.offerInfoValidError.push("Sample details: Correct color is required.");
				valid = false;
			}

			if (settingsService.settings.samplesFollowUp == null || typeof(settingsService.settings.samplesFollowUp) == "undefined") {
				os.offerInfoValidError.push("Sample details: Follow up is required.");
				valid = false;
			}

			if (settingsService.settings.samplesFollowUp && !settingsService.settings.samplesFollowUpDate) {
				os.offerInfoValidError.push("Sample details: Follow up date is required.");
				valid = false;
			}
		}

		return os.offerInfoValidError;
	};

	os.confirmOffer = function (row, $modalInstance, settingsService) {
		row.customer = settingsService.settings.customer;
		$http.post('/action/' + site_code + '/' + language + '/order/confirm', row).success(function (data) {
			$modalInstance.close();
			jQuery("body").endBusy();
		}).error(function (data, status, headers, config) {
			$jQuery("body").endBusy();
		});
	};

	os.requestSamples = function (refId, controller) {
		return $http.post('/action/' + site_code + '/' + language + '/order/requestSamples/' + refId).then(function (response) {
			var data = response.data;
			
			jQuery("body").endBusy();
			$modal.open({
				templateUrl: '/requestSamplesSuccess.inline',
				controller: 'RequestSamplesPopupWindowController',
				windowClass: 'offerinfo-modal-window',
				resolve: {
					message: function () {
						return data.result;
					},
					callback: function() {
						return null;
					}
				}
			});
			
			return true;
		},function (response) {
			jQuery("body").endBusy();
			
			$modal.open({
	            templateUrl: '/requestError.inline',
	            controller: 'RequestErrorPopupWindowController',
	            //windowClass: 'offerinfo-modal-window',
	            resolve: {
	                data: function() {
	                    return {title: "popup-title-request-samples", message:"popup-request-samples-error"};
	                }
	            }
	        });
			
			return false;
			// $scope.errorMessage = data.message;
		});
	};

	os.requestComposition = function (refId, controller) {
		$http.post('/action/' + site_code + '/' + language + '/order/requestComposition/' + refId).success(function (data) {
			jQuery("body").endBusy();
			$modal.open({
				templateUrl: '/requestCompositionSuccess.inline',
				controller: 'RequestCompositionPopupWindowController',
				windowClass: 'offerinfo-modal-window',
				resolve: {
					message: function () {
						return data.result;
					}
				}
			});
		}).error(function (data, status, headers, config) {
			jQuery("body").endBusy();
			
			$modal.open({
	            templateUrl: '/requestError.inline',
	            controller: 'RequestErrorPopupWindowController',
	            //windowClass: 'offerinfo-modal-window',
	            resolve: {
	                data: function() {
	                    return {title: "popup-title-request-composition", message:"popup-request-composition-error"};
	                }
	            }
	        });
			
			// $scope.errorMessage = data.message;
		});
	};
}]);

rdsApp.service("cartService", function ($http, $modal, $q, $route, $filter, $location, $timeout, settingsService, priceService, $log, orderService, translationService, printOptionService, articleMarginService, mailService, profileService, pdfAppendixService) {
	var cs = this;
	var userName = user.username;
	cs.cart = {};
	cs.offerData = {};
	cs.scannedData = "";
	cs.scannedErrors = [];
	cs.processing = [];
	cs.groupedByGender = false;
	cs.groupedByScanSequence = false;
	cs.groupedByArticle = false;
	cs.groupedByCatalog = false;
	cs.groupedByLastAndMould = false;
	cs.groupedByMouldAndLast = false;

	cs.articleScanSequence = [];


	cs.cart.totalMargin = 0;

	cs.resetTotalMargin = function () {
		if (cs.cart != undefined && cs.cart != null) {
			cs.cart.totalMargin = 0;
		}
	};

	cs.removeComma = function (prepack) {
		prepack.yourPrice = prepack.yourPrice.replace(/,/g, "");
	};

	cs.isInStockMenu = function () {
		return $location.search().cat1 == 'Available Now' || $location.search().cat1 == 'Now on stock' || $location.search().addFromStock == 'true';
	};

	cs.setCart = function (response) {
		if (response.articlegroups) {
			cs.cart = response;
			cs.originalarticlegroups = response.articlegroups.slice(0);

			cs.sortCart();
			cs.saveCartToSessionStorage();
		}
	};

	cs.sortCart = function () {
		if (settingsService.isAgent()) {
			if (cs.cart.scanSequence == 1) {
				cs.groupByScanSequence();
			} else if (cs.cart.scanSequence == 2) {
				cs.groupByArticle();
			} else if (cs.cart.scanSequence == 3) {
				cs.groupByGender();
			} else if (cs.cart.scanSequence == 4) {
				cs.groupByCatalogSequence();
			} else if (cs.cart.scanSequence == 5) {
				cs.groupByLastAndMould();
			} else if (cs.cart.scanSequence == 6) {
				cs.groupByMouldAndLast();
			}
		}
	};

	cs.initOriginalArticleGroups = function () {
		if (userName != undefined && userName != null) {
			console.log("Initializing the original article groups");
			if (cs.cart && cs.cart.articlegroups) {
				cs.originalarticlegroups = cs.cart.articlegroups.slice(0);
			}
		}
	};

	cs.initCart = function () {
		cs.restoreCartFromSessionStorage();
		if (cs.cart == null) {
			if (userName != undefined && userName != null) {
				var searchData = {};
				var cartCookie = JSON.parse(jQuery.cookie("cartIds"));
				if (!cartCookie) {
					cartCookie = {};
					jQuery.cookie("cartIds", JSON.stringify(cartCookie), {path: '/', expires: 7});
				}

				searchData.id = cartCookie[userName];
				searchData.customer = settingsService.settings.customer;
				$http.post('/action/' + site_code + '/' + language + '/cart/init', searchData).success(function (response) {
					cartCookie[userName] = response.id;
					jQuery.cookie("cartIds", JSON.stringify(cartCookie), {path: '/', expires: 7});
					cs.setCart(response);
					cs.calculateTotalMargin(cs.cart);
				});
				settingsService.resetSettings();
			}
		}
		cs.initOriginalArticleGroups();
	};

	cs.getOffer = function (callback, cartId) {
		cs.restoreCartFromSessionStorage();

		if (userName != undefined && userName != null) {
			var searchData = {};
			searchData.id = cartId;
			searchData.customer = settingsService.settings.customer;

			$http.post('/action/' + site_code + '/' + language + '/cart/init', searchData).success(function (response) {
				callback.call(cs, response);
			});

		}
	};

	cs.copyOffer = function (data, settings, copyPrices) {
		jQuery("body").busyWithOfferMessage(language);
		var cart = data;
		if (cart.remarks == undefined) {
			cart.remarks = settings.remarks;
		}
		cart.customerReference = jQuery("input#clientReference").val();
		if (cart.customerReference == undefined) {
			cart.customerReference = "";
		}
		cart.settings = settingsService.settings;
		// cart.contact = settingsService.settings.contact;
		cart.sendConfirmation = false;
		cart.isAgent = true;
		cart.settings.update = false;

		if (settingsService.settings.validTill.length == 10) {
			cart.settings.validTillFormatted = settingsService.settings.validTill;
		} else {
			cart.settings.validTillFormatted = $filter('date')(settingsService.settings.validTill, 'dd/MM/yyyy');
		}

		if (settingsService.settings.samplesFollowUpDate != null) {
			if (settingsService.settings.samplesFollowUpDate.length == 10) {
				cart.settings.samplesFollowUpDateFormatted = settingsService.settings.samplesFollowUpDate;
			} else {
				cart.settings.samplesFollowUpDateFormatted = $filter('date')(settingsService.settings.samplesFollowUpDate, 'dd/MM/yyyy');
			}
		}

		cs.resetIds(cart);

		return $http.post('/action/' + site_code + '/' + language + '/order/copy', cart).then(function (response) {
			$route.reload();

			return response.data;
			//jQuery("body").endBusy();
		}, function (response) {
			jQuery("body").endBusy();

			return $q.reject();
		});

	};

	cs.resetIds = function (cart) {
		angular.forEach(cart.articlegroups, function (artgroup, key) {
			angular.forEach(artgroup.articles, function (art, key1) {
				angular.forEach(art.colors, function (col, key2) {
					angular.forEach(col.prepacks, function (pre, key3) {
						pre.id = 0;
					});
				});
			});
		});
	};

	/**
	 * As an agent we can add articles to the cart but they may not be persisted
	 * until the create offer executed. Because we do not have the concept of a
	 * single page, but are using angular we need to do some crazy tricks to
	 * remember what article items were not persisted.
	 */
	cs.saveCartToSessionStorage = function () {
		if (cs.cart) {
			console.log("Saving cart to session storage");
			var groups = cs.cart.articlegroups;
			delete cs.cart.articlegroups;
			cs.cart.articlegroups = cs.originalarticlegroups;

			angular.forEach(cs.cart.articlegroups, function (artgroup, key) {
				angular.forEach(artgroup.articles, function (art, key) {
					angular.forEach(art.colors, function (col, key2) {
						angular.forEach(col.prepacks, function (pre, key3) {
							pre.isMarginBusy = false;
						});
					});
				});
			});

			window.localStorage.setItem("cart", JSON.stringify(cs.cart));
			distributeCartAndSettings(cs.cart, settingsService.settings, userName);
			cs.cart.articlegroups = groups;
		}
	};

	/**
	 * Same story for restoring added articles. Ex.: We add an article to the
	 * cart as agent, after that we navigate to the cart itself. Because the
	 * cart has an other url, angular forgets everything.
	 *
	 * That's why we need to store them localy and restore them whenever needed.
	 */
	cs.restoreCartFromSessionStorage = function () {
		console.log("Restore cart from session storage");
		cs.cart = JSON.parse(window.localStorage.getItem("cart"));
	};


	/**
	 * Same story for restoring added articles. Ex.: We add an article to the
	 * cart as agent, after that we navigate to the cart itself. Because the
	 * cart has an other url, angular forgets everything.
	 *
	 * That's why we need to store them localy and restore them whenever needed.
	 */
	cs.removeCartFromSessionStorage = function () {
		console.log("Remove cart from session storage");
		window.localStorage.removeItem("cart");
	};

	cs.removeCartItems = function (cartForm) {
		angular.forEach(cs.cart.articlegroups, function (artgroup, key) {
			angular.forEach(artgroup.articles, function (art, key) {
				angular.forEach(art.colors, function (col, key2) {
					angular.forEach(col.prepacks, function (pre, key3) {
						pre.linedelete = true;
					});
				});
			});
		});
	};

	cs.calculateTotalMargin = function (cart) {
		if (cart != undefined && cart != null && settingsService.settings.showMargin) {
			cs.resetTotalMargin();

			var totalBase = 0;
			var totalMargin = 0;

			angular.forEach(cart.articlegroups, function (artgroup, key) {
				angular.forEach(artgroup.articles, function (art, key) {
					angular.forEach(art.colors, function (col, key2) {
						angular.forEach(col.prepacks, function (prepack, key3) {
							if (prepack.marginData) {
								if (prepack.margin != 0) {
									totalBase += prepack.marginData.base;
									totalMargin += prepack.marginData.margin;
								}
								// prepack.isMarginBusy = false;
							} else {
								cs.calculateMargin(prepack);
							}
						});
					});
				});
			});

			if (totalBase != 0) {
				cs.cart.totalMargin = totalMargin / totalBase * 100;
				cs.cart.totalMargin = cs.cart.totalMargin.toFixed(2);
			}
		}
	};

	cs.calculatePrices = function (cart) {
		angular.forEach(cart.articlegroups, function (artgroup, key) {
			angular.forEach(artgroup.articles, function (art, key1) {
				angular.forEach(art.colors, function (col, key2) {
					angular.forEach(col.prepacks, function (pre, key3) {
						if (pre.unitPrice === 0) {
							priceService.calculatePrice(pre);
							cs.updateItemInCart(pre);
						}
					});
				});
			});
		});
	};

	cs.calculatePricesWithPriceCode = function (cart, offer) {
		angular.forEach(cart.articlegroups, function (artgroup, key) {
			angular.forEach(artgroup.articles, function (art, key1) {
				angular.forEach(art.colors, function (col, key2) {
					angular.forEach(col.prepacks, function (pre, key3) {
						if (!pre.linedelete) {
							priceService.calculatePriceWithPriceCode(pre, offer.priceCode, offer.priceCodeDiscount);
							cs.formatPrice(pre);
						}
					});
				});
			});
		});
	};

	cs.setCartId = function (cartId, customerId, offer, contact) {
		cs.restoreCartFromSessionStorage();
		if (cs.cart == null || cs.cart.id != cartId) {
			//settingsService.setOffer(offer);
			var searchData = {};
			var cartCookie = JSON.parse(jQuery.cookie("cartIds"));

			if (!cartCookie)
				cartCookie = {};

			cartCookie[userName] = cartId;
			jQuery.cookie("cartIds", JSON.stringify(cartCookie), {path: '/', expires: 7});

			searchData.id = cartCookie[userName];
			$http.post('/action/' + site_code + '/' + language + '/cart/init', searchData).success(function (response) {
				cs.setCart(response);
				cs.calculatePricesWithPriceCode(cs.cart, offer);
				cs.calculateTotalMargin(cs.cart);
			});

			settingsService.settings.contact = {};
			settingsService.settings.contact.contactSequence = contact;
			settingsService.setCustomer(customerId, offer.environment);
			settingsService.setOffer(offer);
			settingsService.saveSettings();

			profileService.getConditions(customerId, offer.environment);
		}
	};

	cs.initCart();

	/**
	 * When adding article to cart, it can be that an agent alters an offer and
	 * then we might NOT persist the article until the cart is saved.
	 *
	 * @see cs.saveCart
	 *
	 * @param article
	 *            the article to save
	 * @param save
	 *            indicates that the article may be saved, even as an agent.
	 */
	cs.addArticleToCart = function (article) {
		cs.highlightAdd();
		var data = {};
		data.cartId = cs.cart.id;
		data.article = article;
		var previous = data.article.previous;
		var next = data.article.next;
		data.article.previous = null;
		data.article.next = null;
		data.settings = settingsService.settings;
		data.addFromStock = cs.isInStockMenu();
		data.customer = settingsService.settings.customer;

		if (settingsService.isAgent()) {
			cs.addItemAsAgent(data);
		} else {
			$http.post('/action/' + site_code + '/' + language + '/cart/addArticleItem', data).success(function (response) {
				var cartCookie = JSON.parse(jQuery.cookie("cartIds"));
				if (!cartCookie)
					cartCookie = {};
				cartCookie[userName] = response.id;
				jQuery.cookie("cartIds", JSON.stringify(cartCookie), {path: '/', expires: 7});
				cs.setCart(response);
				cs.calculatePricesWithPriceCode(cs.cart, settingsService.settings);
				cs.calculateTotalMargin(cs.cart);

				data.article.previous = previous;
				data.article.next = next;
				cs.saveCartToSessionStorage();
			});
			cs.scannedData = "";
		}
	};

	cs.addToCart = function (article) {
		cs.highlightAdd();
		var data = {};
		data.cartId = cs.cart.id;
		data.article = article;
		var previous = data.article.previous;
		var next = data.article.next;
		data.article.previous = null;
		data.article.next = null;
		data.settings = settingsService.settings;
		data.addFromStock = cs.isInStockMenu();
		data.customer = settingsService.settings.customer;
		if (settingsService.isAgent()) {
			cs.addItemAsAgent(data);
		} else {
			$http.post('/action/' + site_code + '/' + language + '/cart/addItem', data).success(function (response) {
				var cartCookie = JSON.parse(jQuery.cookie("cartIds"));
				if (!cartCookie)
					cartCookie = {};
				cartCookie[userName] = response.id;
				jQuery.cookie("cartIds", JSON.stringify(cartCookie), {path: '/', expires: 7});
				cs.setCart(response);
				cs.calculatePricesWithPriceCode(cs.cart, settingsService.settings);
				cs.calculateTotalMargin(cs.cart);

				data.article.previous = previous;
				data.article.next = next;
				cs.saveCartToSessionStorage();
			});
		}
	};

	cs.addScanToCart = function () {

		// performance
		var performance = window.performance;
		var t0 = performance.now();

		var scanField = document.getElementById("scannedData");
		var scan = scanField.value;
		scanField.value = "";
		var scans = scan.trim().split(/\s+/);

		for (var i = 0; i < scans.length; i++) {
			var scanItem = scans[i];

			cs.articleScanSequence.push(scanItem);

			var data = {};
			data.cartId = cs.cart.id;
			data.scan = scanItem;
			data.settings = settingsService.settings;
			data.customer = settingsService.settings.customer;

			var t1 = performance.now();
			$http.post('/action/' + site_code + '/' + language + '/cart/addScannedItem', data).success(function (response) {
				var t2 = performance.now();
				console.log("Adding scan", response);
				var cartCookie = JSON.parse(jQuery.cookie("cartIds"));
				if (cartCookie == null) {
					cartCookie = {};
				}
				cartCookie[userName] = response.id;
				jQuery.cookie("cartIds", JSON.stringify(cartCookie), {path: '/', expires: 7});

				cs.calculatePricesWithPriceCode(response, settingsService.settings);

				var result = 0;
				angular.forEach(response.articlegroups, function (articleGroupNew, index) {
					if (articleGroupNew.articles.length > 0) {
						result += articleGroupNew.articles.length;
						angular.forEach(cs.originalarticlegroups, function (articleGroup, index) {
							if (articleGroup.key == articleGroupNew.key || articleGroup.key == "SCAN_SEQUENCE") {
								cs.mergeArticleGroups(articleGroupNew, articleGroup);
							}
						});
					}
				});

				if (result > 0) {
					cs.scanError = false;
					cs.sortCart();
					// cs.calculateTotalMargin(cs.cart);
					cs.saveCartToSessionStorage();

					cs.addedColors = cs.getAddedColors(response, data.scan);
				} else {
					// fail :/
					cs.addScanError(scan);
				}

				// performance
				var t3 = performance.now();
				console.log("addScanToCart: total:" + (t3 - t0) + "ms - POST: " + (t2 - t1) + "ms")

			}, function (error) {
				cs.addScanError(scan);
			});
			cs.scannedData = "";
		}
	};

	cs.addScanError = function (scan) {

		// check not already in errors, else ngRepeat blows up
		if (-1 === jQuery.inArray(scan, cs.scannedErrors)) {
			// add if not yet in
			cs.scannedErrors.push(scan);
		}
		cs.scanError = true;

	};

	cs.getAddedColors = function (cart, scan) {
		var colors = [];
		var scannedColor = scan.split(".")[1] || "";
		angular.forEach(cart.articlegroups, function (artgroup, key) {
			angular.forEach(artgroup.articles, function (art, key1) {
				angular.forEach(art.colors, function (col, key2) {
					if ("" == scannedColor || col.color == scannedColor)
						colors.push(col);
				});
			});
		});

		return colors;
	};

	cs.addItemToCart = function (article, item) {
		cs.highlightAdd();
		var data = {};
		data.cartId = cs.cart.id;
		data.article = article;
		var previous = data.article.previous;
		var next = data.article.next;
		data.article.previous = null;
		data.article.next = null;
		data.item = item;
		data.settings = settingsService.settings;
		data.customer = settingsService.settings.customer;

		if (settingsService.isAgent()) {
			cs.addItemAsAgent(data);
		} else {
			$http.post('/action/' + site_code + '/' + language + '/cart/addItem', data).success(function (response) {
				var cartCookie = JSON.parse(jQuery.cookie("cartIds"));
				if (!cartCookie)
					cartCookie = {};
				cartCookie[userName] = response.id;
				jQuery.cookie("cartIds", JSON.stringify(cartCookie), {path: '/', expires: 7});
				cs.setCart(response);
				cs.calculatePricesWithPriceCode(cs.cart, settingsService.settings);
				cs.calculateTotalMargin(cs.cart);
				data.article.previous = previous;
				data.article.next = next;
				cs.saveCartToSessionStorage();
			});
		}
	};

	cs.addItemAsAgent = function (data, deferred) {
		var previous = data.article.previous;
		var next = data.article.next;

		if (data.item) {
			cs.toggleLineDeleteItem(data.article, data.item)
		} else {
			cs.toggleLineDelete(data.article);
		}

		var itemInCart = false;
		if (data.item) {
			itemInCart = cs.isItemAlreadyInCart(data.article, data.item);
		} else {
			itemInCart = cs.isAlreadyInCart(data.article)
		}

		if (itemInCart) {
			cs.sortCart();
			cs.saveCartToSessionStorage();

			if (deferred) {
				deferred.resolve(cs.cart);
				return deferred;
			}

			return cs.cart;
		} else {
			$http.post('/action/' + site_code + '/' + language + '/cart/addItemAsAgent', data).success(function (cart) {
				cs.calculatePricesWithPriceCode(cart, settingsService.settings);

				angular.forEach(cart.articlegroups, function (articleGroupNew, index) {
					if (articleGroupNew.articles.length > 0) {
						angular.forEach(cs.originalarticlegroups, function (articleGroup, index) {
							if (articleGroup.key == articleGroupNew.key || articleGroup.key == "SCAN_SEQUENCE") {
								cs.mergeArticleGroupsWithColorsAndPrepacks(articleGroupNew, articleGroup);
							}
						});
					}
				});

				cs.sortCart();
				cs.saveCartToSessionStorage();

				if (deferred) {
					deferred.resolve(cs.cart);
				}
			});
			if (deferred) {
				return deferred;
			}
		}
	};

	cs.mergeArticleGroups = function (newGroup, oldGroup) {
		angular.forEach(newGroup.articles, function (article, index) {
			cs.toggleLineDelete(article);

			cs.removeArticleFromGroup(oldGroup, article);
			article.scanSequence = article.scanSequence = cs.getTotalArticles() + 1;

			function findIndexForArticle(article) {
				var result = cs.articleScanSequence.length;
				for (var i = 0; i < cs.articleScanSequence.length; i++) {
					if (cs.articleScanSequence[i] == article.article) {
						result = i;
					}
				}
				return result;
			}

			var articleIndex = findIndexForArticle(article);
			oldGroup.articles.splice(articleIndex, 0, article);
			article.processed = true;
		});
	};

	cs.mergeArticleGroupsWithColorsAndPrepacks = function (newGroup, oldGroup) {
		angular.forEach(newGroup.articles, function (article, index) {
			cs.toggleLineDelete(article);

			angular.forEach(oldGroup.articles, function (oldArticle) {
				if (article.article == oldArticle.article) {
					cs.toggleLineDelete(article);
					oldArticle.scanSequence = cs.getTotalArticles() + 1;

					angular.forEach(article.colors, function (color) {
						if (!cs.isColorAlreadyInGroup(oldGroup, color) && !article.processed) {
							oldArticle.colors.push(color);
							color.processed = true;
						} else {
							angular.forEach(oldArticle.colors, function (oldColor) {
								if (color.article == oldColor.article && article.article == oldArticle.article && !color.processed) {
									angular.forEach(color.prepacks, function (prepack) {
										if (!cs.isItemAlreadyInCart(color, prepack)) {
											oldColor.prepacks.push(prepack);
											color.processed = true;
										}
									});
								}
							});
						}
					});
					article.processed = true;
				}
			});
			if (!article.processed) {
				article.scanSequence = article.scanSequence = cs.getTotalArticles() + 1;
				oldGroup.articles.push(article);
				article.processed = true;
			}
		});
	};

	cs.updateItemInCart = function (article) {
		var data = {};
		data.cartId = cs.cart.id;
		data.article = article;
		data.customer = settingsService.settings.customer;
		$http.post('/action/' + site_code + '/' + language + '/cart/updateItem', data);
	};

	cs.updateItemRemarkInCart = function (article) {
		var data = {};
		data.cartId = cs.cart.id;
		data.article = article;
		data.customer = settingsService.settings.customer;
		$http.post('/action/' + site_code + '/' + language + '/cart/updateItemRemark', data);
	};

	cs.removeCart = function (cartForm) {
		angular.forEach(cs.cart.articlegroups, function (artgroup, key) {
			angular.forEach(artgroup.articles, function (art, key1) {
				angular.forEach(art.colors, function (col, key2) {
					angular.forEach(col.prepacks, function (pre, key3) {
						cs.removeFromCart(pre, cartForm, true);
					});
				});
			});
		});
	};

	cs.removeFromCart = function (article, cartForm, removeCompleteColor) {
		article.linedelete = true;

		var data = {};
		data.cartId = cs.cart.id;
		data.article = article;
		var previous = data.article.previous;
		var next = data.article.next;
		data.article.previous = null;
		data.article.next = null;
		data.customer = settingsService.settings.customer;
		cs.setArticleLineDelete(article, removeCompleteColor);
		cs.saveCartToSessionStorage();

		if (!settingsService.isAgent()) {
			$http.post('/action/' + site_code + '/' + language + '/cart/removeItem', data).success(function (response) {
				var cartCookie = JSON.parse(jQuery.cookie("cartIds"));
				if (!cartCookie)
					cartCookie = {};
				cartCookie[userName] = response.id;
				jQuery.cookie("cartIds", JSON.stringify(cartCookie), {path: '/', expires: 7});
				cs.cart = response;
				data.article.previous = previous;
				data.article.next = next;
			});
		} else {
			if (cartForm != undefined) {
				cartForm.$dirty = true;
			}
		}

	};

	cs.setArticleLineDelete = function (article, removeCompleteColor) {
		if (!removeCompleteColor) {
			article.linedelete = true;
		} else {
			angular.forEach(cs.cart.articlegroups, function (artgroup, key) {
				angular.forEach(artgroup.articles, function (art, key) {
					if (art.article == article.article) {
						angular.forEach(art.colors, function (col, key2) {
							angular.forEach(col.prepacks, function (pre, key3) {
								if (pre.article == article.article && pre.color == article.color) {
									pre.linedelete = true;
								}
							});
						});
					}
				});
			});
		}
	};

	cs.isPrepackCompletelyDeleted = function (prepacks) {
		var deletedColors = 0;
		for (var i = 0; i < prepacks.length; i++) {
			if (prepacks[i].linedelete == true) {
				++deletedColors;
			}
		}

		return prepacks.length == deletedColors;
	};

	cs.isArticleCompletelyDeleted = function (article) {
		var completelyDeleted = true;

		for (var i = 0; i < article.colors.length; i++) {
			var color = article.colors[i];
			for (var j = 0; j < color.prepacks.length; j++) {
				if (!color.prepacks[j].linedelete) {
					completelyDeleted = false;
					break;
				}
			}
			if (!completelyDeleted)
				break;
		}
		return completelyDeleted;
	};

	cs.removeArticleFromGroup = function (group, article) {
		var ret = null;
		angular.forEach(group.articles, function (art, key) {
			if (art.article == article.article) {
				ret = key;
			}
		});

		if (ret != null) {
			group.articles.splice(ret, 1);
		}
	};

	cs.isColorAlreadyInGroup = function (group, article) {
		var ret = false;
		angular.forEach(group.articles, function (art, key) {
			if (art.article == article.article) {
				angular.forEach(art.colors, function (col, key2) {
					if (col.color == article.color) {
						angular.forEach(col.prepacks, function (pre, key3) {
							if (col.color == pre.color && !pre.linedelete) {
								ret = true;
							}
						});
					}
				});
			}
		});
		return ret;
	};

	cs.isAlreadyInCart = function (article) {
		var ret = false;
		if (cs.cart != undefined) {
			angular.forEach(cs.cart.articlegroups, function (artgroup, key) {
				angular.forEach(artgroup.articles, function (art, key) {
					if (art.article == article.article) {
						angular.forEach(art.colors, function (col, key2) {
							angular.forEach(col.prepacks, function (prepack, key2) {
								if (prepack.color == article.color && !prepack.linedelete) {
									ret = true;
									return true;
								}
							});
						});
					}
				});
			});
		}
		return ret;
	};

	cs.toggleLineDelete = function (article) {
		var ret = false;
		angular.forEach(cs.cart.articlegroups, function (artgroup, key) {
			angular.forEach(artgroup.articles, function (art, key) {
				if (art.article == article.article) {
					angular.forEach(art.colors, function (col, key2) {
						angular.forEach(col.prepacks, function (prepack, key2) {
							if (prepack.color == article.color && prepack.linedelete) {
								prepack.linedelete = false;
							}
						});
					});
				}
			});
		});
		return ret;
	};

	cs.toggleLineDeleteItem = function (article, item) {
		angular.forEach(cs.cart.articlegroups, function (artgroup, key) {
			angular.forEach(artgroup.articles, function (art, key) {
				if (art.article == article.article) {
					angular.forEach(art.colors, function (col, key2) {
						if (col.color == article.color) {
							angular.forEach(col.prepacks, function (pre, key3) {
								if (pre.assortment == item.assortment && pre.assortmentExtension == item.assortmentExtension && pre.linedelete) {
									pre.linedelete = true;
								}
							});
						}
					});
				}
			});
		});
	};

	cs.isItemAlreadyInCart = function (article, item) {
		var ret = false;
		angular.forEach(cs.cart.articlegroups, function (artgroup, key) {
			angular.forEach(artgroup.articles, function (art, key) {
				if (art.article == article.article) {
					angular.forEach(art.colors, function (col, key2) {
						if (col.color == article.color) {
							angular.forEach(col.prepacks, function (pre, key3) {
								if (pre.assortment == item.assortment && pre.assortmentExtension == item.assortmentExtension && !pre.linedelete) {
									ret = true;
									return true;
								}
							});
						}
					});
				}
			});
		});
		return ret;
	};

	cs.isCartEmpty = function () {
		var empty = true;
		angular.forEach(cs.cart.articlegroups, function (artgroup, key) {
			angular.forEach(artgroup.articles, function (art, key) {
				angular.forEach(art.colors, function (col, key2) {
					angular.forEach(col.prepacks, function (pre, key3) {
						if (!pre.linedelete) {
							empty = false;
						}
					});
				});
			});
		});

		return empty;
	};

	cs.updateOtherColors = function (article, prepack) {
		var price = prepack.yourPrice;
		angular.forEach(article.colors, function (col, key2) {
			angular.forEach(col.prepacks, function (pre, key2) {
				if (pre.assortment == prepack.assortment) {
					pre.yourPrice = price;
					cs.calculateMargin(pre, true);
				}
			});
		});
	};

	cs.updateOtherColorsRemarks = function (article, prepack) {
		var remark = prepack.remark;
		angular.forEach(article.colors, function (col, key2) {
			angular.forEach(col.prepacks, function (pre, key2) {
				if (pre.assortment == prepack.assortment) {
					pre.remark = remark;
					cs.updateItemRemarkInCart(prepack);
				}
			});
		});
	};

	cs.createOffer = function (sendConfirmation, background, reload) {

		// performance
		var performance = window.performance;
		var t0 = performance.now();

		/**
		 * Screenshot taking has been disabled as this takes on avg 50% of the saveOffer time
		 */
		var screenshotLoaded = true;
		// var screenshotLoaded = false;
		// html2canvas(document.body, {
		// 	onrendered: function (canvas) {
		// 		cs.cart.screenshot = canvas.toDataURL();
		// 		screenshotLoaded = true;
		// 	}
		// });

		cs.lastOrderId = "";
		if ((settingsService.settings.title == undefined
			|| settingsService.settings.title == null
			|| settingsService.settings.title == ""
			|| settingsService.settings.title == "SPROX selection :") && settingsService.isAgent()) {
			$modal.open({
				templateUrl: '/content/order/offerTitleNeeded.html',
				controller: 'PopupWindowController',
				size: 255
			}).result.then(function () {
			}, function () {
				cs.initCart();
			});
			return false;
		} else if (!cs.isCartEmpty()) {
			if (!background) {
				jQuery("body").busyWithOfferMessage(language);
			}
			cs.cart.remarks = jQuery("textarea#offerRemark").val();
			if (cs.cart.remarks == undefined) {
				cs.cart.remarks = settingsService.settings.remarks;
			}
			cs.cart.customerReference = jQuery("input#clientReference").val();
			if (cs.cart.customerReference == undefined) {
				cs.cart.customerReference = "";
			}
			cs.cart.settings = settingsService.settings;
			cs.cart.contact = settingsService.settings.contact;
			cs.cart.sendConfirmation = false;
			cs.cart.isAgent = settingsService.isAgent();
			if (settingsService.settings.offerRefID && settingsService.isAgent()) {
				cs.cart.offerRefID = settingsService.settings.offerRefID;
				settingsService.settings.update = true;
			} else {
				settingsService.settings.update = false;
				delete cs.cart.offerRefID;
			}

			if (settingsService.settings.validTill.length == 10) {
				cs.cart.settings.validTillFormatted = settingsService.settings.validTill;
			} else {
				cs.cart.settings.validTillFormatted = $filter('date')(settingsService.settings.validTill, 'dd/MM/yyyy');
			}

			if (settingsService.settings.samplesFollowUpDate != null) {
				if (settingsService.settings.samplesFollowUpDate.length == 10) {
					cs.cart.settings.samplesFollowUpDateFormatted = settingsService.settings.samplesFollowUpDate;
				} else {
					cs.cart.settings.samplesFollowUpDateFormatted = $filter('date')(settingsService.settings.samplesFollowUpDate, 'dd/MM/yyyy');
				}
			}

			cs.busyCreatingOrder = true;
			var realScanSequence = cs.cart.scanSequence;
			cs.groupByScanSequence();
			cs.cart.scanSequence = realScanSequence;

			// Create a copy, because the cart gets cleared before actually sending the
			// confirmation
			var tempCart = JSON.parse(JSON.stringify(cs.cart));

			/**
			 * Screenshot taking has been disabled as this takes on avg 50% of the saveOffer time
			 */
			// var screenshotInterval = setInterval(function () {
			// 	if (screenshotLoaded) {
			// 		clearInterval(screenshotInterval);

			// performance
			console.log("before /action/order/create: " + (performance.now() - t0) + " milliseconds.");

			$http.post('/action/' + site_code + '/' + language + '/order/create', cs.cart).then(function (response) {

				// performance
				console.log("after /action/order/create: " + (performance.now() - t0) + " milliseconds.");

				$log.debug("Cart service - created offer: refId:", response.data.key);
				tempCart.offerRefID = response.data.key;
				
				function cleanUp() {
					window.sessionStorage.setItem("refID", response.data.key);
					settingsService.settings.offerRefID = response.data.key;

					if (!background) {
						cs.lastOrderId = response.data.key;
						var cartCookie = JSON.parse(jQuery.cookie("cartIds"));
						if (!cartCookie)
							cartCookie = {};

						cartCookie[userName] = undefined;
						jQuery.cookie("cartIds", JSON.stringify(cartCookie), {path: '/', expires: 7});
						if (!settingsService.isAgent()) {
							cs.removeCartFromSessionStorage();
							cs.emptyCartNoConfirm();
							cs.initCart();
						} else {
							settingsService.settings.customer = {};
							settingsService.removeSettings();
							settingsService.resetSettings();
						}

						jQuery("textarea#offerRemark").val("");
						jQuery("input#clientReference").val("");

						if (!settingsService.isAgent()) {
							$modal.open({
								templateUrl: '/offerSaved.inline',
								controller: 'PopupWindowController',
								size: 255
							}).result.then(function () {
							}, function () {
								cs.removeCartFromSessionStorage();
							});
						} else {
							if (!background && !sendConfirmation) {
								window.location.href = "/" + language + "/my-zone#/offers";
							}

							cs.initCart();
						}
						if (reload) {
							cs.removeCartFromSessionStorage();
							cs.emptyCartNoConfirm();
							cs.busyCreatingOrder = false;
							$route.reload();
						}
					}

					jQuery("body").endBusy();
					settingsService.saveSettings();
				};

				if(settingsService.isAgent()) {
					printOptionService.savePrintOptions(response.data.key).then(
							function (payload) {
								console.log("Print options saved for refId:" + response.data.key);
								cs.sendConfirmation(sendConfirmation, tempCart).then(cleanUp);
								cs.busyCreatingOrder = false;
							},
							function (errorData) {
								cs.sendConfirmation(sendConfirmation, tempCart).then(cleanUp);
								printOptionService.sendErrorMail(errorData.data);
								cs.busyCreatingOrder = false;
							}
						);
				} else {
					cs.sendConfirmation(true, tempCart).then(cleanUp);
					cs.busyCreatingOrder = false;
				}
			}, function (response) {
				settingsService.settings.mailExtras.filesToUpload = [];
				settingsService.saveSettings();

				//If 500, error is caused internal and already handled by Java.
				//We're trying to support other types of errors that do not happen internal.
				if (response.status != 500) {
					var subject = "Error saving offer(JavaScript)!";
					var message = "<h1>Error Report</h1><br /><br />";

					delete cs.cart.screenshot;

					if (typeof user != "undefined" && user != undefined)
						message += "User: " + JSON.stringify(user) + "<br/>";

					message += "<h2>Error saving cart</h2> <br />" +
						JSON.stringify(cs.cart) + " <br /><br />" +
						"<h2>Response</h2>" + JSON.stringify(response) + "<br />" +
						"";
					mailService.sendErrorMail(site_code, subject, message);
				}

				var errorMessage = "Error saving offer.";
				if (!!response.data.message)
					errorMessage = response.data.message;

				jQuery.showError(errorMessage);
				jQuery("body").endBusy();
			});

			/**
			 * Screenshot taking has been disabled as this takes on avg 50% of the saveOffer time
			 */
			// 	}
			// }, 100);

			return true;
		} else {
			jQuery("body").endBusy();
			var modalInstance = $modal.open({
				templateUrl: '/content/order/cartShouldNotBeEmpty.html',
				controller: 'PopupWindowController',
				size: 255
			});
			return false;
		}
	};

	cs.sendConfirmation = function (sendConfirmation, cart) {
		function sendTheMail(sendConfirmation) {
			if (sendConfirmation) {
				var isAgent = settingsService.isAgent();
				
				return $http.post('/action/' + site_code + '/' + language + '/order/sendConfirmationRequest', cart).then(
					function (data) {
						if(!isAgent)
							return;
							
						// Success, nothing to do
						$modal.open({
							templateUrl: '/offerSendToClient.inline',
							controller: 'PopupWindowController',
							size: 255
						});
					}, function (data) {
						mailService.sendErrorMail(site_code, data.data.subject, data.data.message);
						
						if(!isAgent)
							return;
						
						$modal.open({
							templateUrl: '/offerSendToClientFailure.inline',
							controller: 'PopupWindowController',
							size: 255
						});
					}
				);
			} else {
				var deferredSend = $q.defer();
				deferredSend.resolve();
				return deferredSend.promise;
			}
		};
		
		cart.isAgent = settingsService.isAgent();
		var deferred = $q.defer();
		if (!cart.settings) {
			cs.getPdfAppendix(cart.refId, handleSendConfirmation);

			function handleSendConfirmation(pdfAppendix) {
				var contact = {};
				contact.contactSequence = cart.contactSequence;
				contact.customerNumber = cart.customer;

				cart.id = cart.orderRef;
				cart.settings = JSON.parse(JSON.stringify(cart));
				cart.settings.mailExtras = settingsService.settings.mailExtras;
				cart.settings.pdfAppendix = pdfAppendix;
				cart.settings.sendOnlyToAgent = settingsService.settings.sendOnlyToAgent;
				cart.contact = contact;
				cart.offerRefID = cart.refId;

				var promise = printOptionService.retrievePrintOptions(cart.refId);
				promise.then(function (options) {
					cart.settings.printOptions = options;

					sendTheMail(sendConfirmation).then(function() {
						deferred.resolve();
					}, function() {
						deferred.reject();
					});
				}, function () {
					sendTheMail(sendConfirmation).then(function() {
						deferred.resolve();
					}, function() {
						deferred.reject();
					});
				});
			}
		} else {
			cart.settings.sendOnlyToAgent = settingsService.settings.sendOnlyToAgent;
			sendTheMail(sendConfirmation).then(function() {
				deferred.resolve();
			}, function() {
				deferred.reject();
			});
		}

		console.log("Send confirmation ", cart);
		return deferred.promise;
	};


	cs.createPreview = function (cartFormDetails, cartForm, interval) {
		if (!cs.busyCreatingOrder) {
			jQuery("body").busyWithSpecificMessage(translationService.translate("CREATING_PREVIEW"));
			var refID = window.sessionStorage.getItem("refID");
			// FIXME double offers: (maybe) something with settings.update,
			// and/or settingsService.setOffer when save & preview?

			$log.debug("save and preview: refId:", refID);
			settingsService.settings.update = true;
			settingsService.settings.refId = refID;
			cs.getPdfAppendix(refID, requestPreview);

			function requestPreview(pdfAppendix) {
				$http.post("/action/" + site_code + "/" + language + "/order/getPDF/offer_request?refID=" + refID, {
					pdfAppendix: pdfAppendix,
					printOptions: printOptionService.printOptions
				}, {responseType: 'arraybuffer'})
					.then(function (response) {
						var file = new Blob([response.data], {type: 'application/pdf'});
						var fileURL = URL.createObjectURL(file);
						if (window.navigator.msSaveOrOpenBlob) {
							window.navigator.msSaveOrOpenBlob(file, 'preview-' + cartService.cart.id + '.pdf');
						} else {
							window.open(fileURL);
						}
						jQuery("body").endBusy();
					});
			}

			clearInterval(interval);
			if (cartFormDetails != undefined) {
				cartFormDetails.$dirty = false;
			}
			if (cartForm != undefined) {
				cartForm.$dirty = false;
			}
		}
	};

	cs.deleteOffer = function () {
		cs.cart.settings = settingsService.settings;

		$http.post('/action/' + site_code + '/' + language + '/order/delete', cs.cart)
			.then(function (response) {
					$route.reload();
				}, function (response) {
					jQuery.showError(response.data.message);
				}
			);
	};

	cs.saveCart = function () {
		// Update the cart
		angular.forEach(cs.cart.articlegroups, function (artgroup, key) {
			angular.forEach(artgroup.articles, function (art, key) {
				angular.forEach(art.colors, function (col, key2) {
					angular.forEach(col.prepacks, function (pre, key3) {
						if (pre.id) {
							cs.updateItemInCart(pre);
						}
					});
				});
			});
		});
	};

	cs.emptyCart = function (cartFormDetails, cartForm) {
		var modalInstance = $modal.open({
			templateUrl: '/confirm.inline',
			controller: 'EmptyCartPopupController',
			size: 255,
			resolve: {
				cartFormDetails: function () {
					return cartFormDetails;
				},
				cartForm: function () {
					return cartForm;
				}
			}
		});
	};

	cs.showAgentOfferPopup = function (valid) {
		if (valid || orderService.isOfferInfoValid().length == 0) {
			var data = cs.cart;
			data.refId = settingsService.settings.offerRefID;
			var inst = $modal.open({
				templateUrl: '/agentOfferSettings.inline',
				controller: 'MailExtrasPopupController',
				size: 255,
				resolve: {
					data: function () {
						return data;
					},
					mails: function () {
						return [];
					}
				}
			});
		}
	};

	cs.showMailExtrasPopup = function (data, mails) {
		var modalInstance = $modal.open({
			templateUrl: '/mailExtras.inline',
			controller: 'MailExtrasPopupController',
			size: 255,
			resolve: {
				data: function () {
					return data;
				},
				mails: function () {
					return mails;
				}
			}
		});
	};

	cs.emptyCartClearCustomer = function () {
		var modalInstance = $modal.open({
			templateUrl: '/confirmDeleteCustomerAndEmptyCart.inline',
			controller: 'PopupWindowController',
			size: 255
		});
	};

	cs.groupByGender = function () {
		cs.cart.scanSequence = 3;

		cs.groupedByGender = true;
		cs.groupedByScanSequence = false;
		cs.groupedByArticle = false;
		cs.groupedByCatalog = false;
		cs.groupedByLastAndMould = false;
		cs.groupedByMouldAndLast = false;

		var gendersArticleGroupsMap = {};
		cs.cart.articlegroups = [];

		angular.forEach(cs.originalarticlegroups, function (artgroup, key) {
			angular.forEach(artgroup.articles, function (art, key) {
				var showArticle = !cs.isArticleCompletelyDeleted(art);

				if (showArticle) {
					var gender = art.colors[0].prepacks[0].gender.toUpperCase();
					var articleGroup = gendersArticleGroupsMap[gender];
					if (articleGroup == null || articleGroup == undefined) {
						gendersArticleGroupsMap[gender] = {key: gender, articles: []};
						articleGroup = gendersArticleGroupsMap[gender];
					}
					articleGroup.articles.push(art);
				}
			});
		});

		for (var key in gendersArticleGroupsMap) {
			if (gendersArticleGroupsMap.hasOwnProperty(key)) {
				cs.cart.articlegroups.push(gendersArticleGroupsMap[key]);
			}
		}
	};

	cs.groupByArticle = function () {
		cs.cart.scanSequence = 2;

		cs.groupedByGender = false;
		cs.groupedByScanSequence = false;
		cs.groupedByArticle = true;
		cs.groupedByCatalog = false;
		cs.groupedByLastAndMould = false;
		cs.groupedByMouldAndLast = false;

		var articleGroupsMap = {};
		cs.cart.articlegroups = [];

		angular.forEach(cs.originalarticlegroups, function (artgroup, key) {
			angular.forEach(artgroup.articles, function (art, key) {
				var showArticle = !cs.isArticleCompletelyDeleted(art);

				if (showArticle) {
					var articleGroupKey = artgroup.key;
					var articleGroup = articleGroupsMap[articleGroupKey];
					if (articleGroup == null || articleGroup == undefined) {
						articleGroupsMap[articleGroupKey] = {key: articleGroupKey, articles: []};
						articleGroup = articleGroupsMap[articleGroupKey];
					}
					articleGroup.articles.push(art);
				}
			});
		});

		for (var key in articleGroupsMap) {
			if (articleGroupsMap.hasOwnProperty(key)) {
				var articleGroup = articleGroupsMap[key];
				articleGroup.articles = articleGroup.articles.sort(cs.sortByArticle);
				cs.cart.articlegroups.push(articleGroup);
			}
		}
	};

	cs.groupByScanSequence = function () {
		cs.cart.scanSequence = 1;
		cs.groupedByGender = false;
		cs.groupedByScanSequence = true;
		cs.groupedByArticle = false;
		cs.groupedByCatalog = false;
		cs.groupedByLastAndMould = false;
		cs.groupedByMouldAndLast = false;

		var articleGroupKey = "SCAN_SEQUENCE";
		var articleGroupsMap = {"SCAN_SEQUENCE": {key: articleGroupKey, articles: []}};
		var articleGroup = articleGroupsMap[articleGroupKey];
		cs.cart.articlegroups = [];

		angular.forEach(cs.originalarticlegroups, function (artgroup, key) {
			angular.forEach(artgroup.articles, function (art, key) {
				var showArticle = !cs.isArticleCompletelyDeleted(art);

				if (showArticle) {
					articleGroup.articles.push(art);
				}
			});
		});

		for (var key in articleGroupsMap) {
			if (articleGroupsMap.hasOwnProperty(key)) {
				articleGroup = articleGroupsMap[key];
				articleGroup.articles = articleGroup.articles.sort(cs.sortByScanSequence);
				cs.cart.articlegroups.push(articleGroup);
			}
		}
	};

	cs.groupByCatalogSequence = function () {
		cs.cart.scanSequence = 4;
		cs.groupedByGender = false;
		cs.groupedByScanSequence = false;
		cs.groupedByArticle = false;
		cs.groupedByCatalog = true;
		cs.groupedByLastAndMould = false;
		cs.groupedByMouldAndLast = false;

		var articleGroupKey = "CATALOG_SEQUENCE";
		var articleGroupsMap = {"CATALOG_SEQUENCE": {key: articleGroupKey, articles: []}};
		var articleGroup = articleGroupsMap[articleGroupKey];
		cs.cart.articlegroups = [];

		angular.forEach(cs.originalarticlegroups, function (artgroup, key) {
			angular.forEach(artgroup.articles, function (art, key) {
				var showArticle = !cs.isArticleCompletelyDeleted(art);

				if (showArticle) {
					articleGroup.articles.push(art);
				}
			});
		});

		for (var key in articleGroupsMap) {
			if (articleGroupsMap.hasOwnProperty(key)) {
				articleGroup = articleGroupsMap[key];
				articleGroup.articles = articleGroup.articles.sort(cs.sortByCatalogSequence);
				cs.cart.articlegroups.push(articleGroup);
			}
		}
	};

	cs.groupByLastAndMould = function () {
		cs.cart.scanSequence = 5;
		cs.groupedByGender = false;
		cs.groupedByScanSequence = false;
		cs.groupedByArticle = false;
		cs.groupedByCatalog = false;
		cs.groupedByLastAndMould = true;
		cs.groupedByMouldAndLast = false;

		var lastsArticleGroupsMap = {};
		cs.cart.articlegroups = [];

		angular.forEach(cs.originalarticlegroups, function (artgroup, key) {
			angular.forEach(artgroup.articles, function (art, key) {
				var showArticle = !cs.isArticleCompletelyDeleted(art);

				if (showArticle) {
					var last = art.colors[0].prepacks[0].last.toUpperCase();
					var mould = art.colors[0].prepacks[0].mould.toUpperCase();

					var keyname = last + "/" + mould;
					if (last == "" && mould == "")
						keyname = "";

					var articleGroup = lastsArticleGroupsMap[keyname];
					if (articleGroup == null || articleGroup == undefined) {
						lastsArticleGroupsMap[keyname] = {key: keyname, articles: [], useKeyAsHeader: true, keys: {last: last, mould: mould}};
						articleGroup = lastsArticleGroupsMap[keyname];
					}
					articleGroup.articles.push(art);
				}
			});
		});

		for (var key in lastsArticleGroupsMap) {
			if (lastsArticleGroupsMap.hasOwnProperty(key)) {
				cs.cart.articlegroups.push(lastsArticleGroupsMap[key]);
			}
		}
	};

	cs.groupByMouldAndLast = function () {
		cs.cart.scanSequence = 6;
		cs.groupedByGender = false;
		cs.groupedByScanSequence = false;
		cs.groupedByArticle = false;
		cs.groupedByCatalog = false;
		cs.groupedByLastAndMould = false;
		cs.groupedByMouldAndLast = true;

		var lastsArticleGroupsMap = {};
		cs.cart.articlegroups = [];

		angular.forEach(cs.originalarticlegroups, function (artgroup, key) {
			angular.forEach(artgroup.articles, function (art, key) {
				var showArticle = !cs.isArticleCompletelyDeleted(art);

				if (showArticle) {
					var last = art.colors[0].prepacks[0].last.toUpperCase();
					var mould = art.colors[0].prepacks[0].mould.toUpperCase();

					var keyname = mould + "/" + last;
					if (last == "" && mould == "")
						keyname = "";

					var articleGroup = lastsArticleGroupsMap[keyname];
					if (articleGroup == null || articleGroup == undefined) {
						lastsArticleGroupsMap[keyname] = {key: keyname, articles: [], useKeyAsHeader: true, keys: {last: last, mould: mould}};
						articleGroup = lastsArticleGroupsMap[keyname];
					}
					articleGroup.articles.push(art);
				}
			});
		});

		for (var key in lastsArticleGroupsMap) {
			if (lastsArticleGroupsMap.hasOwnProperty(key)) {
				cs.cart.articlegroups.push(lastsArticleGroupsMap[key]);
			}
		}
	}

	cs.sortByArticle = function (article1, article2) {
		var article1Number = parseInt(article1.article);
		var article2Number = parseInt(article2.article);
		return article1Number - article2Number;
	};

	cs.sortByScanSequence = function (article1, article2) {
		if (article1.scanSequence && article2.scanSequence && !article1.colors && !article2.colors) {
			var article1Sequence = parseInt(article1.scanSequence);
			var article2Sequence = parseInt(article2.scanSequence);
			return article1Sequence - article2Sequence;
		} else {
			var article1Sequence = cs.getSequenceForArticle(article1);
			var article2Sequence = cs.getSequenceForArticle(article2);
			return article1Sequence - article2Sequence;
		}

	};

	cs.sortByCatalogSequence = function (article1, article2) {
		var catalogSequence1 = article1.colors[0].prepacks[0].catalogSequence;
		var catalogSequence2 = article2.colors[0].prepacks[0].catalogSequence;

		return catalogSequence1 - catalogSequence2;
	};

	cs.getSequenceForArticle = function (article) {
		var result = 0;
		angular.forEach(article.colors, function (color, key) {
			angular.forEach(color.prepacks, function (prepack, key) {
				if (prepack.sequence > result) {
					result = parseInt(prepack.sequence);
				}
			});
		});

		return result;
	};

	cs.emptyCartNoConfirm = function () {
		cs.cart = {};
		cs.articleScanSequence = [];
		var cartCookie = JSON.parse(jQuery.cookie("cartIds"));

		if (!!cartCookie) {
			cartCookie[user.username] = undefined;
			jQuery.cookie("cartIds", JSON.stringify(cartCookie), {path: '/', expires: 7});
		}
		cs.initCart();
	};

	cs.getTotalArticles = function () {
		if (settingsService.isUserLoggedIn() && cs.cart != null) {
			var articles = 0;
			angular.forEach(cs.cart.articlegroups, function (artgroup, key) {
				angular.forEach(artgroup.articles, function (article, key) {
					if (!cs.isArticleCompletelyDeleted(article)) {
						articles += 1;
					}
				});
			});
			return articles;
		}

		return 0;
	};

	cs.getTotalColors = function () {
		if (settingsService.isUserLoggedIn() && cs.cart != null) {
			var colors = 0;
			angular.forEach(cs.cart.articlegroups, function (artgroup, key) {
				angular.forEach(artgroup.articles, function (art, key) {
					angular.forEach(art.colors, function (col, key2) {
						angular.forEach(col.prepacks, function (prepack, key2) {
							if (prepack.linedelete == undefined || prepack.linedelete == false) {
								colors++;
							}
						});
					});
				});
			});

			return colors;
		}

		return 0;
	};

	cs.getTotalPairs = function () {
		var pairs = 0;
		angular.forEach(cs.cart.articlegroups, function (artgroup, key) {
			angular.forEach(artgroup.articles, function (art, key) {
				angular.forEach(art.colors, function (col, key2) {
					angular.forEach(col.prepacks, function (prepack, key2) {
						pairs += parseInt(prepack.number) * parseInt(prepack.pairs);
					});
				});
			});
		});
		return pairs;
	};

	cs.getTotalCartons = function () {
		var cartons = 0;
		angular.forEach(cs.cart.articlegroups, function (artgroup, key) {
			angular.forEach(artgroup.articles, function (art, key) {
				angular.forEach(art.colors, function (col, key2) {
					angular.forEach(col.prepacks, function (prepack, key2) {
						cartons += parseInt(prepack.number);
					});
				});
			});
		});
		return cartons;
	};

	cs.getTotalPrice = function () {
		var price = 0;
		angular.forEach(cs.cart.articlegroups, function (artgroup, key) {
			angular.forEach(artgroup.articles, function (art, key) {
				angular.forEach(art.colors, function (col, key2) {
					angular.forEach(col.prepacks, function (prepack, key2) {
						price += prepack.calculatedPrice * prepack.pairs * prepack.number;
					});
				});
			});
		});
		return price;
	};

	cs.getTotalCurrency = function () {
		if (cs.cart.articlegroups && cs.cart.articlegroups.length > 0 && cs.cart.articlegroups[0].articles && cs.cart.articlegroups[0].articles.length > 0 && cs.cart.articles[0].colors && cs.cart.articles[0].colors[0].prepacks) {
			return cs.cart.articles[0].colors[0].prepacks[0].calculatedValuta;
		} else {
			return "";
		}
	};

	cs.showNumbersInCart = function () {
		return !(settingsService.isAgent() || !settingsService.isRetailClient());
	};

	cs.showCartPopup = function () {
		jQuery("div#cartPopupContent").fadeIn("slow", function () {
		}).mouseenter(function () {
			jQuery.mouseOverCartPopup = true;
		}).mouseleave(function () {
			jQuery.mouseOverCartPopup = false;
// jQuery("div#cartPopupContent").hide().off();
			jQuery("div#cartPopupContent").fadeOut("slow").off();
		});
		$timeout(function () {
			if (!jQuery.mouseOverCartPopup) {
// jQuery("div#cartPopupContent").hide().off();
				jQuery("div#cartPopupContent").fadeOut("slow").off();
			}
		}, 6000);
	};

	cs.highlightAdd = function () {
		cs.showCartPopup();
	};

	cs.getPdfLink = function (data) {
		if (data != undefined) {
			var refId = data;
			if (data.refId == undefined) {
				data = {};
				data.refId = refId;
			}
			return "/action/" + site_code + "/" + language + "/order/getPDF/offer_request?refID=" + data.refId;
		}
	};

	cs.getImageZipLink = function (data) {
		if (data != undefined) {
			var refId = data;
			if (data.refId == undefined) {
				data = {};
				data.refId = refId;
			}
			return "/action/" + site_code + "/" + language + "/order/getOrderImages/" + data.refId;
		}
	};

	cs.getExcelLink = function (data) {
		if (data != undefined) {
			var refId = data;
			if (data.refId == undefined) {
				data = {};
				data.refId = refId;
				data.showImages = settingsService.settings.showImages;
				data.offerType = settingsService.settings.offerType;
				data.showPrice = settingsService.settings.showPrice;
				data.showRRP = settingsService.settings.showRRP;
			}

			var url = "/action/" + site_code + "/" + language + "/order/getExcel/offer_request?refID=" + data.refId + "&showImages=" + data.showImages + "&offerType=" + data.offerType;

			if (settingsService.isAgent()) {
				url += "&showPrice=" + data.showPrice + "&showRRP=" + data.showRRP;
			}

			return url;
		}
	};

	cs.getEditLink = function (params) {
		if (params != undefined) {
			return "/" + language + "/catalog#/list?offerRefID=" + params.refId + "&cartId=" + params.orderRef + "&customerId=" + params.customer
				+ "&environmentCode=" + params.environment + "&contact=" + encodeURIComponent(params.contactSequence);
		}
	};

	cs.calculateMargin = function (prepack, force) {
		if (!empty(ss.settings.customer) && settingsService.settings.showMargin) {
			if ((prepack && !prepack.linedelete && !prepack.isMarginBusy && !isNaN(prepack.yourPrice) && settingsService.settings.priceCodeDiscount.length == 2 && !prepack.marginData) || force) {
				if (settingsService.isAgent()) {
					prepack.marginFetched = false;
					if (!force) prepack.isMarginBusy = true;
					delete prepack.margin;
					delete prepack.marginData;

					var promise = articleMarginService.getMargin(
						(settingsService.settings.customer) ? settingsService.settings.customer.number : 0,
						(settingsService.settings.customer) ? settingsService.settings.customer.environmentCode : 'E',
						prepack.brand,
						prepack.category,
						prepack.article,
						prepack.color,
						prepack.assortment,
						prepack.assortmentExtension,
						settingsService.settings.season,
						(settingsService.settings.customer) ? settingsService.settings.customer.currency : 'EUR',
						settingsService.settings.priceCode,
						settingsService.settings.priceCodeDiscount,
						prepack.yourPrice,
						prepack.number,
						settingsService.settings.offerRefID);

					if (promise != undefined) {
						promise.then(
							function (data) {
								if (data.data.margin != 0 && data.data.base != 0) {
									var value = (data.data.margin / data.data.base) * 100;
									if ((settingsService.settings.priceCode == "C" && value < 25) ||
										(settingsService.settings.priceCode != "C" && value < 33)) {
										var errorClass = "error";
									}

									prepack.marginErrorClass = errorClass;
									prepack.margin = value.toFixed(2);
								} else {
									prepack.margin = 0.00;
								}
								prepack.marginFetched = true;
								// prepack.isMarginBusy = false;
								prepack.marginData = data.data;

								cs.calculateTotalMargin(cs.cart);
							},
							function (error) {
								articleMarginService.sendErrorMail(error.data);
							}
						);
					} else {
						prepack.margin = 0.00;
						prepack.marginFetched = true;
					}
				}
			}
		}
	};

	cs.formatPrice = function (article) {
		angular.forEach(article.colors, function (col, key2) {
			angular.forEach(col.prepacks, function (prepack, key2) {
				if (isNaN(parseFloat(prepack.yourPrice)))
					prepack.yourPrice = 0;
				prepack.yourPrice = parseFloat(prepack.yourPrice).toFixed(2);
			});
		});

		if (cs.cart != undefined) {
			angular.forEach(cs.cart.articlegroups, function (artgroup, key) {
				angular.forEach(artgroup.articles, function (art, key) {
					if (art.article == article.article) {
						angular.forEach(art.colors, function (col, key2) {
							angular.forEach(col.prepacks, function (prepack, key2) {
								prepack.yourPrice = parseFloat(prepack.yourPrice).toFixed(2);
							});
						});
					}
				});
			});
		}
	};

	cs.getCost = function (prepack) {
		var cost = prepack.costcaf;
// cafcost hoort bij letter E en X
// fobcost bij letter C en Y
// cafucost bij letter U
// cafgcost bij letter G
		if (settingsService.settings.priceCode == "C" || settingsService.settings.priceCode == "Y") {
			cost = prepack.costfob;
		}
		if (settingsService.settings.priceCode == "U") {
			cost = prepack.costcafu;
		}
		if (settingsService.settings.priceCode == "G") {
			cost = prepack.costcafg;
		}

		return cost;
	};

	cs.getRoyalties = function (prepack) {
		var royalties = prepack.royalties;
		// fobcost bij letter C en Y
		if (settingsService.settings.priceCode == "C" || settingsService.settings.priceCode == "Y") {
			royalties = prepack.royaltiesFOB;
		}

		return royalties;
	};

	cs.priceCodeChanged = function () {
		if (settingsService.isAgent()) {
			settingsService.settings.orderJustLoaded = false;
			cs.resetTotalMargin();

			angular.forEach(cs.cart.articlegroups, function (artgr, key) {
				angular.forEach(artgr.articles, function (art, key) {
					angular.forEach(art.colors, function (col, key2) {
						angular.forEach(col.prepacks, function (pre, key3) {
							priceService.calculatePrice(pre);
							cs.calculateMargin(pre, true);
						});
					});
				});
			});
		}
	};

	cs.priceCodeChangedNoMargins = function () {
		if (settingsService.isAgent()) {
			settingsService.settings.orderJustLoaded = false;
			cs.resetTotalMargin();

			angular.forEach(cs.cart.articlegroups, function (artgr, key) {
				angular.forEach(artgr.articles, function (art, key) {
					angular.forEach(art.colors, function (col, key2) {
						angular.forEach(col.prepacks, function (pre, key3) {
							priceService.calculatePrice(pre);
							cs.calculateMargin(pre, true);
						});
					});
				});
			});
		}
	};

	cs.moveArticleToFavourites = function (color) {
		var cookieName = "favouritesIds";
		jQuery("body").busyWithMessage(language);
		var cartCookie = JSON.parse(jQuery.cookie(cookieName));
		color.favouritesId = cartCookie[userName];

		$http.post('/action/' + site_code + '/' + language + '/cart/moveItemToFavourites', color).success(function (response) {
			cs.cart = response;
			cs.initCart();
			jQuery("body").endBusy();
		});
	};

	cs.getPdfAppendix = function (refId, callback) {
		pdfAppendixService.getPdfAppendix(refId).then(function (response) {
			callback(response.data);
		}, function (error) {
			callback({});
			pdfAppendixService.sendErrorMail(error.data);
		});
	};
});

rdsApp.service("favouritesService", function ($http, $modal, $q, settingsService, articleService, cartService, $log, $location) {
	var fs = this;
	var userName = user.username;

	var resourceName = "favourites";
	var cookieName = "favouritesIds";

	fs.favourites = [];

	fs.getTotalColors = function () {
		if (settingsService.isUserLoggedIn() && fs.favourites != null) {
			var colors = 0;
			angular.forEach(fs.favourites.articlegroups, function (artgroup, key) {
				angular.forEach(artgroup.articles, function (art, key) {
					angular.forEach(art.colors, function (col, key2) {
						angular.forEach(col.prepacks, function (prepack, key2) {
							if (prepack.linedelete == undefined || prepack.linedelete == false) {
								colors++;
							}
						});
					});
				});
			});

			return colors;
		}

		return 0;
	};

	fs.initFavourites = function () {
		var searchData = {};
		var favouritesCookie = JSON.parse(jQuery.cookie("favouritesIds"));
		if (!favouritesCookie) {
			favouritesCookie = {};
		}

		searchData.id = favouritesCookie[userName];
		$http.post('/action/' + site_code + '/' + language + '/' + resourceName + '/init', searchData).success(function (response) {
			favouritesCookie[userName] = response.id;
			jQuery.cookie(cookieName, JSON.stringify(favouritesCookie), {path: '/', expires: 7});
			fs.favourites = response;
		});
	};

	fs.resetFavourites = function () {
		var searchData = {};
		var favouritesCookie = JSON.parse(jQuery.cookie("favouritesIds"));

		$http.post('/action/' + site_code + '/' + language + '/' + resourceName + '/init', searchData).success(function (response) {
			favouritesCookie[userName] = response.id;
			jQuery.cookie(cookieName, JSON.stringify(favouritesCookie), {path: '/', expires: 7});
			fs.favourites = response;
		});
	};

	fs.isInStockMenu = function () {
		return $location.search().cat1 == 'Available Now' || $location.search().cat1 == 'Now on stock' || $location.search().addFromStock == 'true';
	};

	fs.addToFavourites = function (article) {
		jQuery("body").busyWithMessage(language);
		var data = fs.getData(article);
		$http.post('/action/' + site_code + '/' + language + '/' + resourceName + '/addItem', data).success(function (response) {
			var cartCookie = JSON.parse(jQuery.cookie(cookieName));
			cartCookie[userName] = response.id;
			jQuery.cookie(cookieName, JSON.stringify(cartCookie), {path: '/', expires: 7});
			fs.favourites = response;
			jQuery("body").endBusy();
		});
	};

	fs.addArticleToFavourites = function (article) {
		var data = {};
		data.favouritesId = fs.favourites.id;
		data.article = article;
		data.article.previous = null;
		data.article.next = null;
		data.settings = settingsService.settings;
		data.addFromStock = fs.isInStockMenu();
		$http.post('/action/' + site_code + '/' + language + '/' + resourceName + '/addArticleItem', data).success(function (response) {
			var favouritesCookie = JSON.parse(jQuery.cookie(cookieName));
			favouritesCookie[userName] = response.id;
			jQuery.cookie(cookieName, JSON.stringify(favouritesCookie), {path: '/', expires: 7});
			fs.favourites = response;
		});
		fs.scannedData = "";
		$log.debug("Favourites: ", fs.favourites);
	};

	fs.emptyFavourites = function () {
		if (!fs.isFavouritesEmpty()) {
			var modalInstance = $modal.open({
				templateUrl: '/confirm.inline',
				controller: 'FavouritesPopupController',
				size: 255
			});
		}
	};

	fs.deleteFavouritesItemsFromDB = function () {
		if (!fs.isFavouritesEmpty()) {
			jQuery("body").busyWithMessage(language);
			var data = fs.getData();
			$http.delete('/action/' + site_code + '/' + language + '/' + resourceName + '/empty/' + data.favouritesId).success(function (response) {
				fs.favourites = response;

				jQuery("body").endBusy();
			});
		}
	};

	fs.removeFromFavourites = function (article) {
		$log.debug("Remove from favourites: ", article);
		jQuery("body").busyWithMessage(language);
		var data = fs.getData(article);

		$http.post('/action/' + site_code + '/' + language + '/' + resourceName + '/removeItem', data).success(function (response) {
			var cartCookie = JSON.parse(jQuery.cookie(cookieName));
			cartCookie[userName] = response.id;
			jQuery.cookie(cookieName, JSON.stringify(cartCookie), {path: '/', expires: 7});
			fs.favourites = response;

			jQuery("body").endBusy();
		});
	};

	fs.isFavouritesEmpty = function () {
		var ret = true;
		angular.forEach(fs.favourites.articlegroups, function (artgroup, key) {
			if (artgroup.articles.length > 0) {
				ret = false
			}
		});
		return ret;
	};

	fs.isAlreadyInFavourites = function (article) {
		var ret = false;
		angular.forEach(fs.favourites.articlegroups, function (artgroup, key) {
			angular.forEach(artgroup.articles, function (art, key) {
				if (art.article == article.article) {
					angular.forEach(art.colors, function (col, key2) {
						if (col.color == article.color) {
							ret = true;
							return true;
						}
					});
				}
			});
		});
		return ret;
	};

	fs.getFavouritesCount = function () {
		var favouritesColorsArray = [];

		angular.forEach(fs.favourites.articlegroups, function (artgroup, key) {
			angular.forEach(artgroup.articles, function (art, key) {
				angular.forEach(art.colors, function (artColor, key) {
					favouritesColorsArray.push(artColor.article.concat('-' + artColor.color));
				});
			});
		});
		return favouritesColorsArray.unique().length;
	};

	fs.getData = function (article, item) {
		var data = {};
		data.favouritesId = fs.favourites.id;
		if (article) {
			data.article = angular.copy(article);
		}
		if (item) {
			data.item = item;
		}
		if (data.article) {
			data.article.previous = null;
			data.article.next = null;
		}
		data.settings = settingsService.settings;

		return data;
	};

	fs.getDetailLink = function (article) {
		return articleService.getDetailLink(article);
	};

	fs.moveArticleToCart = function (color, deferred) {
		jQuery("body").busyWithMessage(language);
		var cartCookie = JSON.parse(jQuery.cookie("cartIds"));
		if (!cartCookie)
			cartCookie = {};

		if (!cartCookie[userName])
			cartCookie[userName] = cartService.cart.id;

		color.cartId = cartCookie[userName];

		if (settingsService.isAgent) {
			var data = {};
			data.article = color;
			data.cartId = cartCookie[userName];
			data.color = color.color;
			data.colorSimple = color.colorDescription;
			data.settings = settingsService.settings;
			data.stockArticle = color.stockArticle;

			var deferredMoved = $q.defer();
			var deferMoved = cartService.addItemAsAgent(data, deferredMoved);
			if (deferMoved != null) {
				var promiseMoved = deferMoved.promise;

				promiseMoved.then(function () {
					fs.removeFromFavourites(color);
					if (!!deferred)
						deferred.resolve();
					else {
						jQuery("body").endBusy();
					}
				}, function () {
					if (!!deferred)
						deferred.reject();
					else {
						jQuery("body").endBusy();
					}
				});
			} else {

			}
		} else {
			$http.post('/action/' + site_code + '/' + language + '/' + resourceName + '/moveItemToCart', color).success(function (response) {
				var cartCookie = JSON.parse(jQuery.cookie(cookieName));
				cartCookie[userName] = response.id;
				jQuery.cookie(cookieName, JSON.stringify(cartCookie), {path: '/', expires: 7});
				fs.favourites = response;

				cartService.removeCartFromSessionStorage();
				cartService.initCart();
				jQuery("body").endBusy();

				if (!!deferred)
					deferred.resolve();
			});
		}

		if (!!deferred)
			return deferred.promise;
	};

	fs.moveFavouritesToCart = function () {
		if (!fs.isFavouritesEmpty()) {
			jQuery("body").busyWithMessage(language);
			var articlesProcessed = 0;
			var totalArticlesToProcess = fs.getTotalColors();

			angular.forEach(fs.favourites.articlegroups, function (artgroup, key) {
				angular.forEach(artgroup.articles, function (art, key) {
					angular.forEach(art.colors, function (col, key2) {
						angular.forEach(col.prepacks, function (pre, key3) {
							if (!cartService.isItemAlreadyInCart(col, pre)) {
								var deferred = $q.defer();
								fs.moveArticleToCart(pre, deferred).then(function () {
									articlesProcessed += 1;
									fs.gotoCart(articlesProcessed, totalArticlesToProcess);
								}, function () {
									console.log("Could not move an article from favourites to cart");
									console.log(pre);

									articlesProcessed += 1;
									fs.gotoCart(articlesProcessed, totalArticlesToProcess);
								});
							} else {
								articlesProcessed += 1;
								fs.removeFromFavourites(pre);

								fs.gotoCart(articlesProcessed, totalArticlesToProcess);
							}
						});
					});
				});
			});

			fs.resetFavourites();
		}
	};

	fs.gotoCart = function (articlesProcessed, totalArticlesToProcess) {
		if (articlesProcessed == totalArticlesToProcess) {
			jQuery("body").endBusy();
			cartService.saveCartToSessionStorage();
			window.location = "/" + language + "/catalog#/cart";
		}
	};

	if (window.location.search.indexOf("noheartbeattrigger") == -1) {
		fs.initFavourites();
	}
});

rdsApp.controller("FavouritesController", ['$scope', 'favouritesService', 'articleService', 'cartService', '$modal', function ($scope, favouritesService, articleService, cartService, $modal) {

	$scope.getFavouritesService = function () {
		return favouritesService;
	};

	$scope.getArticleService = function () {
		return articleService;
	};

	$scope.getSelectedArticle = function () {
		return articleService.selectedArticle;
	};

	$scope.getCartService = function () {
		return cartService;
	}
}]);

rdsApp.controller("FavouritesPopupController", ['$scope', '$http', '$modalInstance', 'favouritesService', function ($scope, $http, $modalInstance, favouritesService) {
	$scope.ok = function () {
		favouritesService.deleteFavouritesItemsFromDB();
		$modalInstance.close();
	};

	$scope.cancel = function () {
		$modalInstance.close();
	};
}]);


rdsApp.service("articleService", function ($http, $compile, $route, $filter, $q, $timeout, menuService, settingsService, cartService, $location, filterService, translationService) {
	var userName = user.username;
	var initialSort = "sortCatalog";
	var serv = this;
	serv.orderBy = initialSort;
	serv.orderByCurrent = initialSort;
	serv.imageSize = "small";
	serv.articles = undefined;
	serv.articlesUnsorted = undefined;
	serv.articlesSortedStyle = undefined;
	serv.articlesSortedBestSold = undefined;
	serv.currentArticles = [];
	serv.selectedArticle = {};
	serv.itemsToShow = 96;
	serv.itemsToShowOptions = [
		{value: 24, label: 24},
		{value: 48, label: 48},
		{value: 96, label: 96},
		{value: 150, label: 150}
	];
	serv.currentPage = 1;
	serv.listHash = "";

	serv.isArticleLoaded = false;

	serv.searchData = {};

	serv.autocompleteOptions = [];
	serv.isBusyGettingArticles = false;

	if (window.location.search.indexOf("noheartbeattrigger") == -1) {
		$http.get('/action/' + site_code + '/' + language + '/filter/autocomplete').success(function (data) {
			serv.autocompleteOptions = data;
		});
	}

	serv.searchArticles = function (searchData, deferred, resetFilters) {
		if (!serv.isBusyGettingArticles) {
			jQuery("body").busyWithMessage(language);
			serv.seasons = [];

			serv.isBusyGettingArticles = true;

			var url = '/action/' + site_code + '/' + language + '/article/find';
			if (searchData.campaign != undefined) {
				url += '?campaign=' + searchData.campaign;
			}

			$http.post(url, searchData).success(function (data) {
				var cartId = null;
				var customerId = null;
				var offer = null;
				var contact = null;

				if (data.cartId) {
					cartId = data.cartId;
					customerId = data.customerId;
					offer = data.offer;
					contact = data.contactSequence;
					data = data.result;
				}

				serv.articles = [];
				var keys = [];

				for (var i = 0; i < data.length; i++) {
					var key = '' + data[i].article + data[i].color;
					if (keys.indexOf(key) === -1) {
						keys.push(key);
						serv.articles.push(data[i]);
					}
				}

				serv.articlesUnsorted = serv.articles.slice(0);
				serv.articlesSortedStyle = $filter('orderByArticles')(serv.articlesUnsorted.slice(0), 'style');
				serv.articlesSortedBestSold = $filter('orderByArticles')(serv.articlesUnsorted.slice(0), 'sortBestSold');
				if (cartId == null) {
					serv.resetFilters(resetFilters);
				}

				if (cartId != null) {
					cartService.setCartId(cartId, customerId, offer, contact);
				} else {
					cartService.initCart();
					settingsService.resetSettings();
				}

				serv.sortArticles();
				if (deferred) {
					deferred.resolve(serv.articles);
				}

				serv.isBusyGettingArticles = false;

				$timeout(function () {
					jQuery("body").endBusy();
				});
			});


			// serv.articles = $filter('colorFilter')(serv.articles,
			// filterService.filters);
			angular.forEach(serv.articles, function (value, index) {
				value.previous = serv.getPrevious(value, serv.articles);
				value.next = serv.getNext(value, serv.articles);
			});

			if (deferred) {
				return deferred;
			}
		}
		return null;
	};

	serv.resetFilters = function (resetFilters) {
		if (resetFilters) {
			filterService.resetAvailableFilters();
		}
		filterService.setFilters(serv.articles);
	};

	serv.getArticleInternal = function (searchData) {
		serv.isArticleLoaded = false;
		if ((serv.selectedArticle.article != searchData.article) || serv.currentArticles.length == 0) {
			serv.currentArticles = [];
			serv.selectedArticle = {};
			serv.selectedArticle.article = searchData.article;
			serv.selectedArticle.brand = searchData.brand;
			serv.selectedArticle.category = searchData.category;
			serv.selectedArticle.color = searchData.color;
			jQuery("body").busy();
			serv.reload360(searchData);
			$http.post('/action/' + site_code + '/' + language + '/article/get', searchData).success(function (data) {
				serv.currentArticles = data;
				var filteredData = $filter('colorFilter')(serv.articles, filterService.filters);
				jQuery.each(serv.currentArticles, function (i, art) {
					if (art.color == searchData.color) {
						art.perspective = "0000";
						art.previous = serv.getPrevious(art, filteredData);
						art.next = serv.getNext(art, filteredData);
						serv.selectedArticle = art;
						menuService.selectMenu(art.cat1, art.cat2, art.cat3, art.cat4, art.shortDescription);
						serv.isArticleLoaded = true;
					}
				});

				$timeout(function () {
					jQuery("body").endBusy();
				});
			});
		} else {
			var filteredData = $filter('colorFilter')(serv.articles, filterService.filters);
			jQuery.each(serv.currentArticles, function (i, art) {
				if (art.color == searchData.color) {
					art.previous = serv.getPrevious(art, filteredData);
					art.next = serv.getNext(art, filteredData);
					serv.selectedArticle = art;
					serv.isArticleLoaded = true;
				}
			});
		}
	};

	serv.getArticle = function (searchData) {
		if (serv.articles == undefined) {
			var result = undefined;
			var deferred = $q.defer();
			var defer = serv.searchArticles({}, deferred, false);
			if (defer != null) {
				var promise = defer.promise;

				promise.then(function () {
					serv.getArticleInternal(searchData);
				});
			}
		}

		serv.getArticleInternal(searchData);
	};

	serv.setListHash = function (hash) {
		serv.listHash = "/" + language + "/catalog#" + hash;
	};

	serv.updateCurrentPage = function () {
		if (serv.articles !== undefined && serv.selectedArticle !== undefined) {
			var articles = serv.articles;
			var lookup = serv.selectedArticle;
			var result = undefined;

			angular.forEach(articles, function (article, i) {
				if (lookup.brand == article.brand &&
					lookup.category == article.category &&
					lookup.article == article.article &&
					lookup.color == article.color) {
					result = i;
				}
			});

			if (result != 0) {
				var pageNumber = Math.ceil(result / (settingsService.settings.itemsToShow - 1));
				if (!isNaN(pageNumber)) {
					serv.currentPage = pageNumber;
				}
			}
		}
	};

	serv.sortArticles = function () {
		if (serv.orderBy == 'sortCatalog') {
			if (serv.articlesUnsorted != undefined) {
				serv.articles = serv.articlesUnsorted.slice(0);
			}
		} else if (serv.orderBy == 'style') {
			serv.articles = serv.articlesSortedStyle;
		} else if (serv.orderBy == 'sortBestSold') {
			serv.articles = serv.articlesSortedBestSold;
		}
	};

	serv.getPrevious = function (lookup, articles) {
		var result = undefined;
		var keepGoing = true;
		angular.forEach(articles, function (article, i) {
			if (keepGoing) {
				if (i > 0) {
					if (lookup.brand == article.brand &&
						lookup.category == article.category &&
						lookup.article == article.article &&
						lookup.color == article.color) {
						result = articles[i - 1];
						keepGoing = false;
					}
				}
			}
		});
		return result;
	};

	serv.getNext = function (lookup, articles) {
		var result = undefined;
		var keepGoing = true;
		angular.forEach(articles, function (article, i) {
			if (keepGoing) {
				if (i < articles.length - 1) {
					if (lookup.brand == article.brand &&
						lookup.category == article.category &&
						lookup.article == article.article &&
						lookup.color == article.color) {
						result = articles[i + 1];
						keepGoing = false;
					}
				}
			}
		});
		return result;
	};

	serv.reload360 = function (article) {
		serv.rotation = jQuery("div.threesixty").ThreeSixty({
			totalFrames: 23, // Total no. of image you have for 360 slider
			endFrame: 23, // end frame for the auto spin animation
			currentFrame: 0, // This the start frame for auto spin
			imgList: '.threesixty_images', // selector for image list
			progress: '.spinner', // selector to show the loading progress
			imagePath: imagePath + '/big/' + article.brand + '/', // path of the image assets
			filePrefix: article.article + '-' + article.color + '-00', // file prefix if any
			ext: '.JPG', // extention for the assets
			height: 473,
			width: 620,
			framerate: 40,
			zeroPadding: true,
			zeroBased: true,
			autoplayDirection: 0,
			navigation: true
		});
	};

	serv.getHost = function (article) {
		if (article != undefined && article.siteCode) {
			var siteCode = article.siteCode;
			var urls = (typeof sharedCartUrls != "undefined") ? sharedCartUrls : [];

			for (var i = 0; i < urls.length; i++) {
				var sharedCookieUrl = urls[i].url;
				if (sharedCookieUrl.toLowerCase().indexOf(siteCode.toLowerCase()) != -1) {
					return sharedCookieUrl;
				}
			}
		}

		return "";
	};

	serv.getDetailLink = function (article) {
		var mainHost = serv.getHost(article);
		mainHost += (mainHost == "") ? "/" : "";

		var host = mainHost + language + "/catalog";
		if (article == undefined) {
			return "";
		}
		var link = host + "#/detail?brand=" + encodeURIComponent(article.brand)
			+ "&article=" + encodeURIComponent(article.article)
			+ "&category=" + encodeURIComponent(article.category)
			+ "&color=" + encodeURIComponent(article.color);

		if (article.cat1) {
			link = link + "&cat1=" + encodeURIComponent(article.cat1);
		}
		if (article.cat2) {
			link = link + "&cat2=" + encodeURIComponent(article.cat2);
		}
		if (article.cat3) {
			link = link + "&cat3=" + encodeURIComponent(article.cat3);
		}
		if (article.cat4) {
			link = link + "&cat4=" + encodeURIComponent(article.cat4);
		}
		link = link + "&addFromStock=" + encodeURIComponent(cartService.isInStockMenu());
		return link;
	};

	serv.getImage = function (article) {
		if (serv.imageSize == "small") {
			return serv.getSmallImg(article);
		} else if (serv.imageSize == "medium") {
			return serv.getMediumImg(article);
		} else if (serv.imageSize == "big") {
			return serv.getBigImg(article);
		}
	};

	serv.getDefaultImage = function (article) {
		return imagePath + "/small/" + article.brand.trim() + "/" + article.article.trim() + "-" + article.color.trim() + ".JPG";
	};

	serv.getDefaultImageBig = function (article) {
		return imagePath + "/big/" + article.brand.trim() + "/" + article.article.trim() + "-" + article.color.trim() + ".JPG";
	};

	serv.getSmallImg = function (article) {
		if (article.perspective == undefined) {
			return imagePath + "/small/" + article.brand.trim() + "/" + article.article.trim() + "-" + article.color.trim() + "-0000.JPG";
		} else {
			return imagePath + "/small/" + article.brand.trim() + "/" + article.article.trim() + "-" + article.color.trim() + "-" + article.perspective.trim() + ".JPG";
		}
	};

	serv.getMediumImg = function (article) {
		if (article.perspective == undefined) {
			return imagePath + "/big/" + article.brand.trim() + "/" + article.article.trim() + "-" + article.color.trim() + "-0000.JPG";
		} else {
			return imagePath + "/big/" + article.brand.trim() + "/" + article.article.trim() + "-" + article.color.trim() + "-" + article.perspective.trim() + ".JPG";
		}
	};

	serv.getBigImg = function (article) {
		if (article.perspective == undefined) {
			return imagePath + "/big/" + article.brand.trim() + "/" + article.article.trim() + "-" + article.color.trim() + "-0000.JPG";
		} else {
			return imagePath + "/big/" + article.brand.trim() + "/" + article.article.trim() + "-" + article.color.trim() + "-" + article.perspective.trim() + ".JPG";
		}
	};

});

rdsApp.controller('EmptyCartPopupController', ['settingsService', 'cartService', '$scope', '$modalInstance', 'cartFormDetails', 'cartForm', function (settingsService, cartService, $scope, $modalInstance, cartFormDetails, cartForm) {

	$scope.cartFormDetails = cartFormDetails;
	$scope.cartForm = cartForm;

	$scope.ok = function () {
		// settingsService.removeSettings();
		// var cartCookie = JSON.parse(jQuery.cookie("cartIds"));
		// cartCookie[user.username] = undefined;
		// jQuery.cookie("cartIds", JSON.stringify(cartCookie), {path: '/',
		// expires: 7});

		cartService.removeCartFromSessionStorage();
		cartService.removeCart($scope.cartForm);
		$scope.cartFormDetails.$dirty = false;
		$scope.cartForm.$dirty = false;
		$modalInstance.close();
	};

	$scope.close = function () {
		$modalInstance.close();
		$route.reload();
	};

	$scope.cancel = function () {
		$modalInstance.dismiss('cancel');
	};

	$scope.getSettingsService = function () {
		return settingsService;
	};

}]);

rdsApp.controller("PopupWindowController", ['$http', '$route', '$scope', '$modalInstance', '$cookieStore', '$timeout', 'articleService', 'cartService', 'settingsService', 'priceService', 'orderService', 'translationService', 'profileService', function ($http, $route, $scope, $modalInstance, $cookieStore, $timeout, articleService, cartService, settingsService, priceService, orderService, translationService, profileService) {
	$scope.errorMessage = "";
	$scope.model = {};
	$scope.model.environmentCode = "E";
	var previousEnvironmentCode = $scope.model.environmentCode;

	$scope.ok = function () {
		settingsService.removeSettings();
		var cartCookie = JSON.parse(jQuery.cookie("cartIds"));
		if (!cartCookie)
			cartCookie = {};
		cartCookie[user.username] = undefined;
		jQuery.cookie("cartIds", JSON.stringify(cartCookie), {path: '/', expires: 7});

		cartService.removeCartFromSessionStorage();
		cartService.initCart();
		$modalInstance.close();
	};

	$scope.showPreview = function () {
		if (empty(settingsService.settings.customer)) {
			$scope.showCustomerMissingPopup();
		} else {
			if (cartService.createOffer(false, true)) {
				var interval = setInterval(function () {
					if (!cartService.busyCreatingOrder) {
						clearInterval(interval);
						cartService.createPreview({}, {}, interval);
					}
				}, 100);
			}
		}
	};

	$scope.okDoNothing = function () {
		$modalInstance.close();
	};

	$scope.okClearCustomerAndCart = function () {
		settingsService.removeSettings();
		cartService.removeCartFromSessionStorage();
		cartService.emptyCartNoConfirm();
		$modalInstance.close();
	};

	$scope.changePasswordOK = function (changePasswordData) {
		$http.post('/action/' + site_code + '/' + language + '/profile/changePassword', changePasswordData).success(function (data) {
			if (data == undefined || data == null || data == "" || jQuery.isEmptyObject(data)) {
				jQuery("#currentPasswordIncorrect").parent().hide();
				jQuery("#modalBody").hide();
				jQuery("#modalFooter").hide();
				jQuery("#lblSuccess").show();
				jQuery("#lblSuccess").html(translationService.translate("RESET_PASSWORD_CONFIRM"));

				// $modalInstance.close();
			} else {
				jQuery("#currentPasswordIncorrect").parent().show();
				jQuery("#currentPasswordIncorrect").show();
				jQuery("#currentPasswordIncorrect").html(data);
			}
		}).error(function (data, status, headers, config) {
			$scope.errorMessage = data.message;
		});
	};

	$scope.customerSelectedOk = function () {
		if (settingsService.isValid()) {
			settingsService.saveSettings();
			cartService.calculateTotalMargin();
			profileService.getConditions(settingsService.settings.customer.id, settingsService.settings.customer.environmentCode);
			$modalInstance.close();
		}
	};

	$scope.offerOK = function () {
		if (settingsService.isAgent()) {
			cartService.removeCartFromSessionStorage();
			cartService.initCart();
			$modalInstance.close();
		}
		window.location.href = "/" + language + "/my-zone#/offers";
	};

	$scope.offerTitleNeededOK = function () {
		settingsService.saveSettings();
		settingsService.settings.showPreview = true;
		$modalInstance.close();
		cartService.createOffer(false, false, true);
	};

	$scope.confirmOfferOK = function () {
		settingsService.selectedOffer.confirmed = true;
		settingsService.setOffer(settingsService.selectedOffer);
		settingsService.settings.update = false;
		settingsService.settings.confirmed = true;
		orderService.confirmOffer(settingsService.selectedOffer, $modalInstance, settingsService);
		$route.reload();
	};

	$scope.confirmOfferCancel = function () {
		settingsService.selectedOffer.confirmed = false;
		settingsService.settings.update = false;
		settingsService.settings.confirmed = false;
		$modalInstance.close();
	};

	$scope.mailInvoiceOK = function () {
		var invoiceToMail = settingsService.settings.invoiceToMail;
		var url = '/action/' + site_code + '/' + language + '/invoice/mail/' + invoiceToMail.id + '/' + invoiceToMail.firm + '/' + invoiceToMail.docnr;

		if (settingsService.settings.howToMail == "other") {
			url = url.replace("mail", "mailother");
			url += '/' + settingsService.settings.emailForInvoice;
		}

		$http.post(url).success(function () {
			$modalInstance.close();
		});
	};

	$scope.mailInvoiceCancel = function () {
		$modalInstance.close();
	};

	$scope.getLastOrderLink = function () {
		return cartService.getPdfLink(cartService.lastOrderId);
	};

	$scope.getLastOrderLinkExcel = function () {
		return cartService.getExcelLink(cartService.lastOrderId);
	};

	$scope.cancel = function () {
		$modalInstance.dismiss('cancel');
	};

	$scope.getSettingsService = function () {
		return settingsService;
	};

	$scope.openFollowUp = function ($event) {
		$event.preventDefault();
		$event.stopPropagation();
		$scope.followUpOpened = true;
	};

	$scope.openValidTill = function ($event) {
		$event.preventDefault();
		$event.stopPropagation();
		$scope.validTillOpened = true;
	};

	$scope.dateOptions = {
		formatYear: 'yy',
		startingDay: 1
	};

	$scope.priceCodeChanged = function () {
		if (settingsService.isAgent()) {
			settingsService.settings.orderJustLoaded = false;
			angular.forEach(cartService.cart.articles, function (art, key) {
				angular.forEach(art.colors, function (col, key2) {
					angular.forEach(col.prepacks, function (pre, key3) {
						priceService.calculatePrice(pre);
					});
				});
			});
		}
	};

	$scope.clearCustomerAndContactFields = function () {
		if ($scope.model.environmentCode != previousEnvironmentCode) {
			$scope.getSettingsService().settings.customer = {};
			$scope.getSettingsService().contacts = [];
			$scope.getSettingsService().settings.contact = {};
		}
		previousEnvironmentCode = $scope.model.environmentCode;
	}
}]);

rdsApp.controller('SampleDetailsInvalidPopupWindowController', ['$scope', '$modalInstance', 'settingsService', function ($scope, $modalInstance, settingsService) {

	$scope.model = {};

	$scope.close = function () {
		$modalInstance.close();
	};

	$scope.save = function () {
		if (!$scope.sampleDetailsForm.$valid) {
			console.log("invalid!");
			return;
		}

		$modalInstance.close();
	};

	$scope.openFollowUp = function ($event, elementOpened) {
		$event.preventDefault();
		$event.stopPropagation();
		$scope.model[elementOpened] = true;
	};

	$scope.getSettingsService = function () {
		return settingsService;
	};

	$scope.boolToString = function (bool) {
		return bool ? 'Yes' : 'No';
	};

	var today = new Date();

	$scope.dateOptions = {
		formatYear: 'yyyy',
		startingDay: 1,
		"min-date": new Date().setMonth(today.getMonth() - 1)
	};
}]);

rdsApp.controller('GeneralController', ['$scope', '$controller', 'filterService', 'orderService', 'menuService', 'cartService', 'articleService', 'settingsService', 'priceService', 'profileService', 'favouritesService', 'drupalService', 'printOptionService', '$location', '$timeout', '$modal', '$http', '$log', function ($scope, $controller, filterService, orderService, menuService, cartService, articleService, settingsService, priceService, profileService, favouritesService, drupalService, printOptionService, $location, $timeout, $modal, $http, $log) {
	var gc = this;

	if (settingsService.customers.length == 0 && ss.isUserLoggedIn() && ss.isAgent()) {
		console.log("Busy while getting customers");

		var interval = setInterval(function () {
			if(settingsService.fetchingCustomers) {
				if ($location.path() === "/new") {
					jQuery("body").busyWithSpecificMessage("Loading customers ...");
				}
			} else {
				if (!articleService.isBusyGettingArticles) {
					jQuery("body").endBusy();
					clearInterval(interval);
				}
			}
		}, 1000);
	}


	$scope.user = user;

	settingsService.restoreSettings();
	menuService.selectMenu($location.search().cat1, $location.search().cat2, $location.search().cat3, $location.search().cat4);

	this.isPropsectModuleAvailable = function () {
		try {
			angular.module("prospectsModule");
			return settingsService.isAgent();
		} catch (e) {
			return false;
		}
	};

	$scope.gotoTopBestSold = function (cat2) {
		window.location.href = "/" + language + "/catalog#/list?a=a&cat1=Collection&cat2=" + cat2 + "&cat3=All%20styles...&resetFilters=false&sortBy=bestSold";
	};

	this.getCatalogs = function () {
		return menuService.catalogs;
	};

	this.getUsername = function () {
		return user.name;
	};

	this.getSiteCode = function () {
		return site_code;
	};

	this.showLeftMenuCart = function () {
		if (!settingsService.isUserLoggedIn()) {
			jQuery("#cartSummaryLeft").parent().parent().parent().parent().hide();
			return false;
		} else {
			jQuery("#cartSummaryLeft").parent().parent().parent().parent().show();
			return true;
		}
	};

	this.showSearch = function () {
		if (!settingsService.isUserLoggedIn()) {
			jQuery("#searchForm").parent().parent().parent().parent().hide();
			return false;
		} else {
			jQuery("#searchForm").parent().parent().parent().parent().show();
			return true;
		}
	};

	this.createNewOffer = function (changedBasePath) {
		window.sessionStorage.removeItem("filterText");
		window.sessionStorage.removeItem("selectedRow");
		window.sessionStorage.removeItem("currentPage");

		settingsService.removeSettings();
		settingsService.contacts = [];
		cartService.removeCartFromSessionStorage();
		cartService.emptyCartNoConfirm();
		printOptionService.clearPrintOptions();

		if (changedBasePath) {
			window.location = "/" + language + "/offers#/new";
		} else {
			$location.path("/new");
		}
	};

	this.gotoOfferOverview = function () {
		cartService.resetTotalMargin();
		window.location = "/" + language + "/my-zone#/offers";
	};

	// site_url is set in the drupal html.tpl.php
	this.getSiteUrl = function () {
		return site_url;
	};

	// site_name is set in the drupal html.tpl.php
	this.getSiteName = function () {
		return site_name;
	};
	// site_name is set in the drupal html.tpl.php
	this.getSiteNameLowerCase = function () {
		return site_name.toLowerCase();
	};

	// site_video_url is set in the drupal html.tpl.php
	this.getSiteVideoUrl = function () {
		return site_video_url;
	};

	this.getParameter = function parse(val) {
		var result = "",
			tmp = [];
		location.search
			.substr(1)
			.split("&")
			.forEach(function (item) {
				tmp = item.split("=");
				if (tmp[0] === val) result = decodeURIComponent(tmp[1]);
			});
		return result;
	};

	this.isPopupVisible = function () {
		return menuService.popupVisible;
	};

	this.showPopup = function (level1) {
		jQuery.each(menuService.catalogs, function (i, catalog) {
			catalog.activeInMenu = false;
		});
		if (menuService.popupVisible) {
			level1.activeInMenu = true;
		} else {
			level1.timer = $timeout(function () {
				menuService.popupVisible = true;
				level1.activeInMenu = true;
			}, 200);
		}
	};

	this.changePopup = function (level1) {
// if (menuService.popupVisible) {
		this.showPopup(level1);
// }
	};

	this.hidePopup = function (level1) {
		if (level1) {
			$timeout.cancel(level1.timer);
			level1.timer = undefined;
		} else {
			menuService.popupVisible = false;
			jQuery.each(menuService.catalogs, function (i, catalog) {
				catalog.activeInMenu = false;
			});
		}
	};

	this.showSettings = function () {
		$modal.open({
			templateUrl: '/settings.inline',
			controller: 'PopupWindowController',
			size: 255
		});
	};

	this.getPdfLink = function (data) {
		return cartService.getPdfLink(data);
	};

	this.getExcelLink = function (data) {
		return cartService.getExcelLink(data);
	};

	this.formattedClassName = function (name) {
		return "cat_" + name.replace(/ /g, '_');
	};

	this.resetAndClick = function (l1, l2, l3, l4) {
		filterService.resetAndClick(l1, l2, l3, l4);
	};

	this.getLink = function (l1, l2, l3, l4) {
		var link = '/' + language + '/catalog#/list?a=a';
		if (l1) {
			link += '&cat1=' + encodeURIComponent(l1.category1);
			if (l2) {
				link += '&cat2=' + encodeURIComponent(l2.category2);
				if (l3) {
					link += '&cat3=' + encodeURIComponent(l3.category3);
					if (l4) {
						link += '&cat4=' + encodeURIComponent(l4.category4);
					}
				}
			}
		}
		link += "&resetFilters=true";
		return link;
	};

	this.getLinkFromCat = function (c1, c2, c3, c4) {
		var link = '/' + language + '/catalog#/list?a=a';
		if (c1) {
			link += '&cat1=' + encodeURIComponent(c1);
			if (c2) {
				link += '&cat2=' + encodeURIComponent(c2);
				if (c3) {
					link += '&cat3=' + encodeURIComponent(c3);
					if (c4) {
						link += '&cat4=' + encodeURIComponent(c4);
					}
				}
			}
		}
		return link;
	};

	this.priceCodeChanged = function () {
		cartService.priceCodeChanged();
	};

	this.priceCodeChangedNoMargins = function () {
		cartService.priceCodeChangedNoMargins();
	};


	this.remarkChanged = function (prepack) {
		cartService.updateItemRemarkInCart(prepack);
	};

	this.getMenuService = function () {
		return menuService;
	};

	this.getCartService = function () {
		return cartService;
	};

	this.getArticleService = function () {
		return articleService;
	};

	this.getSettingsService = function () {
		return settingsService;
	};

	this.getProfileService = function () {
		return profileService;
	};

	this.getDrupalService = function () {
		return drupalService;
	};

	this.getOrderService = function () {
		return orderService;
	};

	this.getPriceService = function () {
		return priceService;
	};

	this.getFavouritesService = function () {
		return favouritesService;
	}
}]);

rdsApp.controller("MailExtrasPopupController", ['$scope', '$http', '$timeout', '$modalInstance', 'cartService', 'settingsService', 'data', 'mails', function ($scope, $http, $timeout, $modalInstance, cartService, settingsService, data, mails) {

	$scope.data = data;
	$scope.mailsTo = mails;
	$scope.mailsBcc = [];
	$scope.file = "";


	$scope.getMails = function () {
		$http.get('/action/' + site_code + '/' + language + '/order/find/mails/' + settingsService.settings.customer.id + "/" + settingsService.settings.sendOnlyToAgent + "/" + settingsService.settings.customer.environmentCode)
			.success(function (data) {

					$scope.mailsTo = data.mails;
					$scope.mailsBcc = data.mailsBcc;
				}
			);
	};
	$scope.getMails();

	$scope.mailsLoaded = function () {
		return $scope.mailsTo.length > 0;
	};

	$scope.agentOfferOK = function () {
		if ($scope.agentOfferForm.$valid) {
			cartService.removeCartFromSessionStorage();
			cartService.showMailExtrasPopup($scope.data, $scope.mailsTo);

			$modalInstance.close();
		}
	};

	$scope.ok = function () {
		if ($scope.mailExtrasForm.$valid) {
			$scope.cancel();
			var filesToRead = settingsService.files.length;
			if (settingsService.files && settingsService.files.length > 0) {
				for (var i = 0, file; file = settingsService.files[i]; i++) {

					var reader = new FileReader();
					reader.onload = (function (file) {
						return function (evt) {
							var attachment = {};
							attachment.name = file.name;
							if (evt.target.readyState == FileReader.DONE) {
								// attachment.content = new
								// Uint8Array(evt.target.result);
								attachment.content = evt.target.result;
								settingsService.settings.mailExtras.filesToUpload.push(attachment);
								filesToRead -= 1;
							}
						}
					})(file);

					reader.readAsDataURL(file);
				}
			}

			var interval = setInterval(function () {
				if (filesToRead == 0) {
					settingsService.settings.showPreview = true;
					cartService.sendConfirmation(true, $scope.data);
					clearInterval(interval);
				}
			}, 50);
		}
	};

	$scope.cancel = function () {
		$modalInstance.close();
	};

	$scope.agentOfferPrevious = function () {
		cartService.showAgentOfferPopup();

		$modalInstance.close();
	};

	$scope.getSettingsService = function () {
		return settingsService;
	};

	$scope.addFilesToUpload = function (data) {
		angular.forEach(data.files, function (file, index) {
			settingsService.files.push(file);
		});

		$timeout(function () {
			$scope.$broadcast('newFileToUploadAdded');
		});
	};

	$scope.removeFileToUpload = function (file) {
		angular.forEach(settingsService.files, function (value, index) {
			if (value == file) {
				settingsService.files.splice(index, 1);
			}
		});
	};

	$scope.showPreview = function () {
		if (empty(settingsService.settings.customer)) {
			$modalInstance.close();
			showCustomerMissingPopup();
		} else {
			window.sessionStorage.setItem("refID", data.refId);
			cartService.createPreview({}, {}, null);
		}
	};

	function showCustomerMissingPopup() {
		var inst = $modal.open({
			templateUrl: '/customerMissing.inline',
			controller: 'PopupWindowController',
			size: 255
		});
	}

}]);

rdsApp.controller('OfferInformationController', ['$scope', 'printOptionService', 'settingsService', 'cartService', function ($scope, printOptionService, settingsService, cartService) {

	$scope.generalActive = true;
	$scope.samplesInfoActive = false;
	$scope.printInfoActive = false;

	if (settingsService.isAgent()) {
		printOptionService.getPrintOptions(settingsService.settings.offerRefID);
	}


	$scope.toggleArticleDetailsPrint = function () {
		printOptionService.toggleArticleDetailsPrint();
	};

	$scope.getPrintOptionService = function () {
		return printOptionService;
	};

	$scope.getSettingsService = function () {
		return settingsService;
	};

	$scope.getCartService = function () {
		return cartService;
	};

}]);
