rdsApp.controller("GridController", ['$http', '$scope', '$timeout', '$window', '$parse', '$modal', '$route', '$location', '$filter', 'translationService', 'cartService', 'settingsService', 'priceService', 'orderService', 'gridService', 'marginService', 'printOptionService', function ($http, $scope, $timeout, $window, $parse, $modal, $route, $location, $filter, translationService, cartService, settingsService, priceService, orderService, gridService, marginService, printOptionService) {
    var controller = this;
    controller.allData = [];
    controller.amountCalculatedBeforeSoftRefresh = 0;
    controller.height = 30;

    settingsService.restoreSettings();

    $scope.showGrid = true;
    $scope.customerArray = [];
    $scope.orderDateArray = [];
    $scope.orderRefArray = [];
    $scope.firmArray = [];
    $scope.seasonArray = [];
    $scope.agentArray = [];
    $scope.statusArray = [];
    $scope.priceCodeArray = [];
    $scope.samplesRequestedArray = [];
    $scope.titleArray = [];
    $scope.customFilterText = "";
    $scope.customArticleFilterText = "";
    $scope.filterBySamples = false;

    $scope.reselectRow = function() {
        // Check if the view was reloaded ! If it was re-select the selected row if there was one.
        // Also reset the customFilterText
        var previousFilterText = window.sessionStorage.getItem("filterText");
        var previousSelectedRow = window.sessionStorage.getItem("selectedRow");
        var previousCurrentPage = window.sessionStorage.getItem("currentPage");

        if (previousFilterText != null) {
            $scope.customFilterText = previousFilterText;
            window.sessionStorage.removeItem("filterText");
        }
        if (previousSelectedRow != null) {
            console.log("Setting row again from storage");
            previousSelectedRow = JSON.parse(previousSelectedRow);
            var interval = setInterval(function() {
                if ($scope.gridOptions && $scope.gridOptions.api && $scope.gridOptions.api.grid) {
                    for (var i = 0; i < previousCurrentPage; i++) {
                        $scope.gridOptions.api.grid.paginationController.onBtNext();
                    }
                    $scope.gridOptions.api.selectIndex(previousSelectedRow.id % $scope.gridOptions.api.grid.paginationController.pageSize, false, false);
                    rowSelected($scope.gridOptions.api.selectionController.selectedNodesById[previousSelectedRow.id]);
                    clearInterval(interval);
                }
            }, 50);
        }
    };

    var preview = window.sessionStorage.getItem("preview");
    if (preview != null && preview) {
        jQuery("body").busyWithSpecificMessage(translationService.translate("CREATING_PREVIEW"));
        var refID = window.sessionStorage.getItem("refID");
        $http.get("/action/" + site_code + "/" + language + "/order/getPDF/offer_request?refID=" + refID, {responseType: 'arraybuffer'})
            .success(function (response) {
                var file = new Blob([response], {type: 'application/pdf'});
                var fileURL = URL.createObjectURL(file);
                window.open(fileURL);
                jQuery("body").endBusy();
            });
    }

    $scope.getOrderWithLogic = function() {
        console.log("GridService fetchingData : " + gridService.fetchingData);

        gridService.startFetchingData();
        var articleSearch = window.sessionStorage.getItem("articleSearch");
        if ($scope.customArticleFilterText != '' || articleSearch != null) {
            settingsService.settings.loadPrices = true;
            settingsService.settings.showPriceCode = false;

            $scope.customArticleFilterText = articleSearch;
            $scope.getOrders('findForArticle/' + articleSearch);
            window.sessionStorage.removeItem("articleSearch");
        } else {
            settingsService.settings.loadPrices = false;
            settingsService.settings.showPriceCode = false;
            $scope.getOrderWithoutArticleDetails();
        }
    };

    $scope.getOrderWithoutArticleDetails = function() {
        var reload = window.sessionStorage.getItem("reload");
        settingsService.saveSettings();
        $scope.getOrders('find');
        if (reload == null) {
            window.sessionStorage.setItem("reload", true);
        } else {
            window.sessionStorage.removeItem("reload");
        }
    };

    $scope.getOrders = function(resourceNameAndParams) {
        $http.get('/action/' + site_code + '/' + language + '/order/' + resourceNameAndParams + '?timestamp=' + new Date().getTime()).then(function (response) {
            controller.allData = [];
            if (resourceNameAndParams == 'findForArticle/' + $scope.customArticleFilterText) {
                $scope.showGrid = true;
            } else {
                $scope.showGrid = response.data.length > 0;
            }

            angular.forEach(response.data, function (obj, index) {
                if (obj.showToCustomer || settingsService.isAgent()) {
                    if ($scope.customerArray.indexOf(obj.customer) == -1) {
                        $scope.customerArray.push(obj.customer);
                    }
                    if ($scope.orderDateArray.indexOf(obj.orderDate) == -1) {
                        $scope.orderDateArray.push(obj.orderDate);
                    }
                    if ($scope.firmArray.indexOf(obj.firm) == -1) {
                        $scope.firmArray.push(obj.firm);
                    }
                    if ($scope.orderRefArray.indexOf(obj.orderRef) == -1) {
                        $scope.orderRefArray.push(obj.orderRef);
                    }
                    if ($scope.seasonArray.indexOf(obj.offerSeason) == -1) {
                        $scope.seasonArray.push(obj.offerSeason);
                    }
                    if ($scope.agentArray.indexOf(obj.offerAgentCode) == -1) {
                        $scope.agentArray.push(obj.offerAgentCode);
                    }
                    if ($scope.statusArray.indexOf(obj.offerStatus) == -1) {
                        $scope.statusArray.push(obj.offerStatus);
                    }
                    if ($scope.priceCodeArray.indexOf(obj.priceCodeFull) == -1) {
                        $scope.priceCodeArray.push(obj.priceCodeFull);
                    }
                    
                    var samplesRequested = "No";
                    
                    if(obj.hasRequestedSamples || obj.hasRequestedSamples == "true")
                    	samplesRequested = "Yes";
                    else if(obj.showSamplesOnStock)
            			samplesRequested = "Confirm";
                    
                    obj.hasRequestedSamplesView = samplesRequested;

                    if ($scope.samplesRequestedArray.indexOf(samplesRequested) == -1) {
                        $scope.samplesRequestedArray.push(samplesRequested);
                    }
                    if ($scope.titleArray.indexOf(obj.title) === -1) {
                        $scope.titleArray.push(obj.title);
                    }

                    obj.article = $scope.customArticleFilterText;

                    controller.allData.push(obj);
                }
            });

            var dataSource = getDataSource(controller.allData);
            $scope.gridOptions.api.setDatasource(dataSource);
            $scope.gridOptions.api.onNewRows();
            $scope.resize();

            console.log("Setting soft refresh timeout");
            $timeout(function() {
                console.log("Actually refreshing the grid");
                $scope.gridOptions.api.softRefreshView();
            });

            $scope.reselectRow();
            gridService.finishFetchingData();
        });
    };

    $scope.resize = function () {
        $scope.gridOptions.api.sizeColumnsToFit();
    };

    $scope.getPdfLink = function () {
        return cartService.getPdfLink(orderService.selectedRow);
    };
    
    $scope.getPdf = function () {
        jQuery("body").busyWithSpecificMessage(translationService.translate("CREATING_PREVIEW"));

    	function requestPdf(pdfAppendix) {
            $http.post("/action/" + site_code + "/" + language + "/order/getPDF/offer_request?refID=" + refId,{pdfAppendix : pdfAppendix, printOptions : printOptions}, {responseType: 'arraybuffer'})
                .then(function (response) {
                    var file = new Blob([response.data], {type: 'application/pdf'});
                    var fileURL = URL.createObjectURL(file);
                    if (window.navigator.msSaveOrOpenBlob) {
                        window.navigator.msSaveOrOpenBlob(file, 'preview-' + cartService.cart.id + '.pdf');
                    } else {
                        window.open(fileURL);
                    }
                    jQuery("body").endBusy();
                });
    	}    	
    	var selectedRow = orderService.selectedRow;
    	
    	if (selectedRow != undefined) {
            var data = selectedRow;
            if (selectedRow.refId == undefined) {
            	selectedRow = {};
            	selectedRow.refId = data;
            }
            var refId = data.refId;
            var printOptions = {};
        	var promise = printOptionService.retrievePrintOptions(refId);
        	promise.then(function(options){
        		printOptions = options;
        		cs.getPdfAppendix(refId,requestPdf);
        	},function(options) {
        		printOptions = options;
        		cs.getPdfAppendix(refId,requestPdf);
        	});
        }
    };

    $scope.getImageZipLink = function () {
        return cartService.getImageZipLink(orderService.selectedRow);
    };

    $scope.getExcelLink = function () {
        return cartService.getExcelLink(orderService.selectedRow);
    };

    $scope.getEditLink = function () {
        return cartService.getEditLink(orderService.selectedRow);
    };

    $scope.getCartService = function () {
        return cartService;
    };

    $scope.onhover = function(refId) {
        document.getElementById(refId).className = "";
        document.getElementById(refId).className = "ng-show tooltip";
    };

    $scope.clearhover = function(refId) {
        document.getElementById(refId).className = "";
        document.getElementById(refId).className = "ng-hide";
    };

    if (settingsService.isAgent()) {
        $scope.columnDefs = [
            {
                headerName: translationService.translate("PREVIOUS_OFFER_CUSTOMER_REF"),
                field: "customer",
                filter: getCustomFilter(translationService, $scope.customerArray, true, "node.data.customer", $scope),
                width: 110
            },
            {
                headerName: translationService.translate("PREVIOUS_OFFER_ORDER_DATE"),
                field: "orderDate",
                filter: getCustomFilter(translationService, $scope.orderDateArray, true, "node.data.orderDate", $scope),
                width: 100,
                cellRenderer: function (params) {
                    return '<div class="tooltip-wrap"><div class="ngCellText">' + params.data.orderDate + '</div><span class="tooltip-content">' + params.data.orderDate + '</span></div>';
                }
            },
            {
                headerName: translationService.translate("PREVIOUS_OFFER_ORDER_REF"),
                field: "orderRef",
                filter: getCustomFilter(translationService, $scope.orderRefArray, true, "node.data.orderRef", $scope),
                width: 125
            },
            {
                headerName: translationService.translate("PREVIOUS_OFFER_NAME1"),
                field: "name1",
                filter: getCustomFilter(translationService, $scope.firmArray, true, "node.data.name1", $scope),
                width: 150,
                cellRenderer: function (params) {
                    return '<div class="tooltip-wrap"><div class="ngCellText">' + params.data.name1 + '</div><span class="tooltip-content">' + params.data.name1 + '</span></div>';
                }
            },
            {
                headerName: translationService.translate("PREVIOUS_OFFER_AGENT"),
                field: "offerAgentCode",
                filter: getCustomFilter(translationService, $scope.agentArray, true, "node.data.offerAgentCode", $scope),
                width: 125
            },
            {
                headerName: translationService.translate("PREVIOUS_OFFER_SEASON"),
                field: "offerSeason",
                filter: getCustomFilter(translationService, $scope.seasonArray, true, "node.data.offerSeason", $scope),
                width: 100
            },
            {
                headerName: translationService.translate("PREVIOUS_OFFER_CONTACT"),
                field: "contact",
                filter: getCustomFilter(translationService, null, false, "node.data.invoiceTitle + ' ' + node.data.firstName + ' ' + node.data.lastName", $scope),
                width: 150,
                cellRenderer: function (params) {
                    return '<div class="tooltip-wrap"><div class="ngCellText">' + params.data.contact + '</div><span class="tooltip-content">' + params.data.contact + '</span></div>';
                }
            },
            {
                headerName: translationService.translate("OFFER_TITLE"),
                field: "title",
                filter: getCustomFilter(translationService, $scope.titleArray, true, "node.data.title", $scope),
                width: 200,
                cellRenderer: function (params) {
                    return '<div class="tooltip-wrap"><div class="ngCellText">' + params.data.title + '</div><span class="tooltip-content">' + params.data.title + '</span></div>';
                }
            },
            {
                headerName: translationService.translate("PREVIOUS_OFFER_STATUS"),
                field: "offerStatus",
                hide: settingsService.settings.loadPrices,
                filter: getCustomFilter(translationService, $scope.statusArray, true, "node.data.offerStatus", $scope),
                width: 125
            },
            {
                headerName: translationService.translate("PREVIOUS_OFFER_PRICE_CODE"),
                field: "priceCodeFull",
                hide: settingsService.settings.loadPrices,
                filter: getCustomFilter(translationService, $scope.priceCodeArray, true, "node.data.priceCodeFull", $scope),
                width: 75
            },
            {
                headerName: translationService.translate("PRICE"),
                field: "price",
                hide: !settingsService.settings.loadPrices,
                volatile: true,
                width: 175,
                cellRenderer: function (params) {
                    if (params.data.loadingPrices) {
                        return '<span class="glyphicon glyphicon-refresh glyphicon-spin"></span>';
                    } else {
                        return params.data.price;
                    }
                }
            },
            {
                headerName: translationService.translate("PREVIOUS_OFFER_MARGIN"),
                field: "totalMarginString",
                hide: !settingsService.settings.calculateMargins,
                volatile: true,
                width: 100,
                cellRenderer: function (params) {
                    if (params.data.loadingMargins) {
                        return '<span class="glyphicon glyphicon-refresh glyphicon-spin"></span>';
                    } else {
                        return params.data.totalMarginString;
                    }
                }
            },
            {
                headerName: translationService.translate("PREVIOUS_OFFER_SHOW_SAMPLES"),
                field: "hasRequestedSamples",
                hide: settingsService.settings.loadPrices,
                filter: getCustomFilter(translationService, $scope.samplesRequestedArray, true, "node.data.hasRequestedSamplesView", $scope),
                volatile: true,
                width: 85,
                cellRenderer: function(params) {
                	if(!params.data.samplesRequestedDate) {
                		if(params.value || params.value == "true")
                			return "Yes";
                		
                		if(params.data.showSamplesOnStock)
                			return "Confirm";
                		
                		return "No";
                	} else {
                		return params.data.samplesRequestedDate;
                	}
                },
                cellStyle: function(params) {
                	//Samples can be confirmed(red + bold)
                	if(!(params.value || params.value == "true") && params.data.showSamplesOnStock) // CONFIRMED
                		return {"background-color": '#FBE5D6', "font-weight": "bold"};
                	
                	// Samples confirmed(Green + bold)
                	if(params.value) // YES || DATE
                		return {"background-color": '#E2F0D9', "font-weight": "bold"};
                	
                	// Samples can't be confirmed
                	return null;
                }
            }
        ];
    } else {
        $scope.columnDefs = [
            {
                headerName: translationService.translate("TITLE"),
                field: "title",
                filter: getCustomFilter(translationService, $scope.customerArray, true, "node.data.title", $scope),
                width: 350
            },
            {
                headerName: translationService.translate("PREVIOUS_OFFER_ORDER_REF"),
                field: "orderRef",
                filter: getCustomFilter(translationService, $scope.orderRefArray, true, "node.data.orderRef", $scope),
                width: 150
            },
            {
                headerName: translationService.translate("PREVIOUS_OFFER_ORDER_DATE"),
                field: "orderDate",
                filter: getCustomFilter(translationService, $scope.orderDateArray, true, "node.data.orderDate", $scope),
                width: 150
            },
            {
                headerName: translationService.translate("PREVIOUS_OFFER_STATUS"),
                field: "offerStatus",
                filter: getCustomFilter(translationService, $scope.statusArray, true, "node.data.offerStatus", $scope),
                width: 200
            },
            {
                headerName: 'Confirmed',
                field: "confirmed",
                cellStyle: {'text-align': 'center'},
                cellRenderer: function (params) {
                    if (params.data.canconfirm) {
                        if (params.data.confirmed) {
                            return "<span class='small'>" + translationService.translate('CONFIRMED') + "</span>";
                        } else {
                            return '<input type="checkbox">';
                        }
                    } else {
                        return "<span class='small'>" + translationService.translate('IN_PROGRESS') + "</span>";
                    }
                }
            }
        ];
    }

    $scope.toggleShowPriceCode = function () {
        settingsService.settings.loadPrices = false;
        settingsService.settings.calculateMargins = !settingsService.settings.calculateMargins;
        settingsService.saveSettings();
        $route.reload();
    };

    $scope.getOfferPrices = function() {
        settingsService.settings.loadPrices = true;
        settingsService.settings.calculateMargins = false;
        settingsService.saveSettings();
        window.sessionStorage.setItem("articleSearch", $scope.customArticleFilterText);
        $route.reload();
    };

    $scope.clearOfferPrices = function() {
        $scope.customArticleFilterText = '';
        settingsService.settings.loadPrices = false;
        settingsService.settings.calculateMargins = false;
        settingsService.saveSettings();
        $route.reload();
    };

    function totalMarginCellRendererFunc(params, callback, index) {
        params.data.loadingMargins = true;

        if (params.data.totalMargin == undefined) {
            var promise = marginService.getMargin(params.data.refId);

            promise.then(
                function(data) {
                    params.data.totalMarginString = data.data + " %";
                    params.data.loadingMargins = false;
                    $scope.gridOptions.api.softRefreshView();

                    callback.call(this, index);
                },
                function(data) {
                    marginService.sendErrorMail(data.data);
                });
        } else {
            callback.call(this, index);
        }
    }

    function getDetail(params, callback, count, rowsThisPage) {
        params.data.loadingPrices = true;
        $scope.gridOptions.api.softRefreshView();

        if (params.data.article != undefined && params.data.article != null && params.data.article != "") {
            //console.log("Getting price detail : ", params.data);
            $http.get('/action/' + site_code + '/' + language + '/order/priceDetail/' + params.data.refId + '/' + params.data.article + '?timestamp=' + new Date().getTime()).then(function (response) {
                //console.log("The response : ", response);
                var prices = response.data;
                if ($scope.gridOptions.api.grid.paginationController.currentPage != $scope.gridOptions.api.grid.paginationController.previousPage) {
                    $scope.gridOptions.api.grid.paginationController.previousPage = $scope.gridOptions.api.grid.paginationController.currentPage;
                    $scope.gridOptions.api.gridOptionsWrapper.rowHeight = 30;
                }
                if (prices.length * 21 > $scope.gridOptions.api.gridOptionsWrapper.rowHeight) {
                    console.log("Setting grid row height to : " + prices.length * 21);
                    $scope.gridOptions.api.gridOptionsWrapper.rowHeight = prices.length * 21;
                    $scope.gridOptions.api.gridPanel.ensureIndexVisible(count);
                }
                //params.data.price = "";
                for (var i = 0; i < prices.length; i++) {
                    if (prices[i].assortmentExtension != '') {
                        params.data.price += priceService.getCurrencyForPriceCode(params.data.priceCode) + ' ' + prices[i].price + ' : ' + prices[i].color + ' : ' + prices[i].assortment +  "-" + prices[i].assortmentExtension;
                    } else {
                        params.data.price += priceService.getCurrencyForPriceCode(params.data.priceCode) + ' ' + prices[i].price + ' : ' + prices[i].color + ' : ' + prices[i].assortment;
                    }
                    if (i < prices.length - 1) {
                        params.data.price += '<br/>'
                    }
                }

                params.data.loadingPrices = false;
                $scope.gridOptions.api.softRefreshView();
                $scope.gridOptions.api.sizeColumnsToFit();
                params.successCallback(rowsThisPage, params.endRow);

                callback.call(this, count);
            });
        } else {
            callback.call(this, count);
        }
    }

    function copyOfferInformation(data) {
        if (data == undefined || data == null) {
            data = orderService.selectedRow;
        }

        var openNextModal = function (data) {
        $modal.open({
            templateUrl: '/copyOffer.inline',
            controller: 'CopyOfferPopupWindowController',
            windowClass: 'offerinfo-modal-window',
            resolve: {
                cart: function() {
                    return data;
                }
            }
            })};

        if(!settingsService.settings.offerRefID) {
    		openNextModal(data);
    	}
        else {
	        $modal.open({
	        	templateUrl: '/confirmClearingOffer.inline',
	        	controller: 'ConfirmClearOfferModalController',
	        	size: 255,
	        	resolve: {
		        	callbackSuccess : function() {return openNextModal;},
		        	data : function() {
		        		return data;
		        	}
	          }
        });
    }

    }

    $scope.copyOfferInformation = copyOfferInformation;

    function deleteOffer(data) {
        if (data == undefined || data == null) {
            data = orderService.selectedRow;
        }
        settingsService.settings.refId = data.refId;
        settingsService.settings.offerRefID = data.orderRef;

        $modal.open({
            templateUrl: '/deleteOffer.inline',
            controller: 'DeleteOfferPopupWindowController',
            windowClass: 'offerinfo-modal-window'
        });
    }

    $scope.deleteOffer = deleteOffer;

    function requestSamples(data) {
        if (data == undefined || data == null) {
            data = orderService.selectedRow;
        }
        
//        if(data.hasRequestedSamples) {
//        	// Open already requested modal
//        	$modal.open({
//        		templateUrl: '/samplesAlreadyRequested.inline',
//        		controller: 'RequestSamplesInfoPopupWindowController',
//        		resolve : {
//        			data : function() {
//        				return {message: ""};
//        			}
//        		}
//        	});
//        	return;
//        }
        
        if(!data.showSamplesOnStock) {
        	//Open invalid modal
        	$modal.open({
        		templateUrl: '/requestSamplesInvalid.inline',
        		controller: 'RequestSamplesInfoPopupWindowController',
        		resolve : {
        			data : function() {
        				return {message: ""};
        			}
        		}
        	});
        	return;
        }
        

        var requestSamplesModal = $modal.open({
            templateUrl: '/requestSamples.inline',
            controller: 'RequestSamplesPopupWindowController',
            //windowClass: 'offerinfo-modal-window',
            resolve: {
                message: function() {
                    return "";
                },
                callback: function() {
                	return function() {
                		$scope.gridOptions.api.onNewRows();
                        $scope.resize();
                	}
                }
            }
        });
    }

    $scope.requestSamples = requestSamples;

    function requestComposition(data) {
        if (data == undefined || data == null) {
            data = orderService.selectedRow;
        }

        $modal.open({
            templateUrl: '/requestComposition.inline',
            controller: 'RequestCompositionPopupWindowController',
            //windowClass: 'offerinfo-modal-window',
            resolve: {
                message: function() {
                    return "";
                }
            }
        });
    }

    $scope.requestComposition = requestComposition;

    function confirmSendOfferToClient() {
        var data = JSON.parse(JSON.stringify(orderService.selectedRow));
        cartService.setCartId(data.orderRef, data.customer, data, data.contactSequence);
        $modal.open({
            templateUrl: '/agentOfferSettings.inline',
            controller: 'MailExtrasPopupController',
            size: 255,
            resolve: {
                data: function () {
                    return data;
                },
                mails: function () {
                    return [];
                }
            }
        });
    }

    $scope.confirmSendOfferToClient = confirmSendOfferToClient;

    function rowSelected(row) {
        // Used to confirm the order, this will look for the checkbox
        if (row) {
            var elements = jQuery(row.eventSource).find("input");
            if (elements.length > 0) {
                var selected = elements[0].checked;
                if (selected) {
                    settingsService.selectedOffer = row.data;
                    $modal.open({
                        templateUrl: '/confirmOffer.inline',
                        controller: 'PopupWindowController',
                        size: 255
                    });
                }
            }

            orderService.selectedRow = row.data;
            window.sessionStorage.setItem("filterText", $scope.customFilterText);
            if (row.node != undefined) {
                window.sessionStorage.setItem("selectedRow", JSON.stringify(row.node));
                window.sessionStorage.setItem("currentPage", $scope.gridOptions.api.grid.paginationController.currentPage);
            }
        }
    }

    $scope.clearStorage = function() {
        window.sessionStorage.removeItem("selectedRow");
    };

    $scope.gridOptions = {
        columnDefs: $scope.columnDefs,
        rowData: null,
        enableFilter: true,
        angularCompileFilters: true,
        angularCompileRows: true,
        enableSorting: true,
        rowSelection: "single",
        cellClicked: rowSelected,
        enableColResize: true,
        rowHeight: 32,
        forPrint: true
    };

    $scope.$watch('customFilterText', function (newVal, oldVal) {
        if (newVal != oldVal) {
            if (newVal == undefined || newVal == '') {
                $scope.gridOptions.api.setDatasource(getDataSource(controller.allData));
            } else {
                $scope.gridOptions.api.setDatasource(getDataSource(controller.allData, newVal, undefined));
            }
            $scope.gridOptions.api.onNewRows();
        }
    }, true);

    $scope.getOrderWithLogic();

    $scope.getOrderService = function() {
        return orderService;
    };

    function filterData(data, filterText) {
        var newData = [];
        angular.forEach(data, function (value, index) {
            if (value.customer.toLowerCase().indexOf(filterText.toLowerCase()) != -1 ||
                value.orderDate.indexOf(filterText) !== -1 ||
                value.orderRef.indexOf(filterText) !== -1 ||
                value.firm.toLowerCase().indexOf(filterText.toLowerCase()) !== -1 ||
                value.name1.toLowerCase().indexOf(filterText.toLowerCase()) !== -1 ||
                value.offerAgentCode.toLowerCase().indexOf(filterText.toLowerCase()) !== -1 ||
                value.offerSeason.toLowerCase().indexOf(filterText.toLowerCase()) !== -1 ||
                value.contact.toLowerCase().indexOf(filterText.toLowerCase()) !== -1 ||
                value.priceCodeFull.toLowerCase().indexOf(filterText.toLowerCase()) !== -1 ||
                value.offerStatus.toLowerCase().indexOf(filterText.toLowerCase()) !== -1 ||
                value.title.toLowerCase().indexOf(filterText.toLowerCase()) !== -1) {
                newData.push(value);
            }
        });

        return newData;
    }

    function filterDataBySamples(data, valueControl) {
        if (valueControl == "") {
            return controller.allData.slice(0);
        }
        
        var newData = [];
        
        angular.forEach(data, function (value, index) {
            if (value.hasRequestedSamplesView == valueControl) {
                newData.push(value);
            }
        });

        return newData;
    }
    
    

    function getDataSource(data, filterText, filterBySamples) {
        orderService.selectedRow = undefined;

        if (filterText != undefined && filterText != '' && filterText != null && !filterBySamples) {
            data = filterData(data, filterText);
        }
        if (filterBySamples) {
            data = filterDataBySamples(data, filterText);
        }

        return {
            data: data,
            rowCount: data.length,
            pageSize: 15,
            overflowSize: 15,

            getRows: function (params) {
                var start = params.startRow;
                var finish = params.endRow;
                // take a chunk of the array, matching the start and finish times
                var rowsThisPage = data.slice(start, finish);
                var lastRow = -1;

                for (var i = 0; i < rowsThisPage.length; i++) {
                    if (rowsThisPage[i].totalMarginString == undefined || rowsThisPage[i].totalMarginString.indexOf("%") == -1) {
                        rowsThisPage[i].totalMarginString = "";
                        rowsThisPage[i].price = "";
                    }
                }

                if (settingsService.isAgent()) {
                    function continueCalculationPrices(count) {
                        console.log("Recalculate prices for row : " + count);

                        var newParams = {};
                        if (count < rowsThisPage.length) {
                            if (!rowsThisPage[count].price || rowsThisPage[count].price == "") {
                                if (settingsService.settings.loadPrices) {
                                    newParams.data = rowsThisPage[count];
                                    newParams.successCallback = params.successCallback;
                                    newParams.endRow = params.endRow;
                                    $scope.gridOptions.api.refreshView();
                                    getDetail(newParams, continueCalculationPrices, ++count, rowsThisPage);
                                }
                            }
                        }
                    }

                    continueCalculationPrices(0);

                    function continueCalculation(count) {
                        console.log("Recalculate row : " + count);

                        var params = {};
                        if (count < rowsThisPage.length) {
                            params.data = rowsThisPage[count];
                            if (rowsThisPage[count].totalMarginString == "") {
                                if (settingsService.settings.calculateMargins) {
                                    params.data.loadingMargins = true;
                                    $scope.gridOptions.api.softRefreshView();
                                    totalMarginCellRendererFunc(params, continueCalculation, ++count);
                                }
                            }
                        }
                    }

                    continueCalculation(0);
                }

                // see if we have come to the last page, and if so, return it
                if (data.length <= finish) {
                    lastRow = data.length;
                }

                if (!settingsService.settings.loadPrices) {
                    params.successCallback(rowsThisPage, lastRow);
                }
            }
        };
    }

    function getCustomFilter(translationService, options, isArray, nodeEvaluationString) {

        function Filter() {}

        Filter.prototype.init = function(params) {
            var t = this;
            t.$scope = params.$scope;
            this.translationService = translationService;
            this.options = options;
            this.isArray = isArray;
            this.nodeEvaluationString = nodeEvaluationString;

            //this.$scope = params.$scope;
            t.$scope.onFilterChanged = function () {
                if (t.nodeEvaluationString.indexOf("hasRequestedSamples") != -1) {
                    $scope.gridOptions.api.setDatasource(getDataSource(controller.allData, this.filterText, true));
                } else {
                    $scope.gridOptions.api.setDatasource(getDataSource(controller.allData, this.filterText));
                }
                $scope.gridOptions.api.onNewRows();
            };
        };

        Filter.prototype.getGui = function () {
            if (!this.isArray) {
                return '<div style="padding: 4px; width: 200px;">' +
                    '<div style="font-weight: bold;">' + translationService.translate("CONTACT_FILTER") + '</div>' +
                    '<div><input style="margin: 4px 0px 4px 0px;" type="text" class="form-control" ng-model="filterText" ng-change="onFilterChanged()" placeholder="' + translationService.translate("PLACEHOLDER_FULL_TEXT_SEARCH") + '"/></div>' +
                    '</div>';
            } else {
                var result = '<div style="padding: 4px; width: 200px;">' +
                    '<div style="font-weight: bold;">' + translationService.translate("STATUS_FILTER") + '</div>';
                if (this.options.length > 10) {
                    result += '<div><input style="margin: 4px 0px 4px 0px;" type="text" class="form-control" ng-model="filterText" ng-change="onFilterChanged()" placeholder="' + translationService.translate("PLACEHOLDER_FULL_TEXT_SEARCH") + '"/></div>';
                }
                result += '<select class="form-control" ng-model="filterText" ng-change="onFilterChanged()">' +
                    '<option value=\'\'>' + this.translationService.translate("CHOOSE_ONE") + '</option>' +
                    this.getOptions() +
                    '</select>' +
                    '</div>';
                return result;
            }
        };

        Filter.prototype.getOptions = function () {
            var result = "";
            angular.forEach(this.options, function (value, index) {
                result += "<option value='" + value + "'>" + value + "</option>"
            });
            return result;
        };

        Filter.prototype.doesFilterPass = function (node) {
            var filterText = this.$scope.filterText;

            if (!filterText) {
                return true;
            }

            var status = eval(this.nodeEvaluationString);
            var passed = true;
            filterText.toLowerCase().split(" ").forEach(function (filterWord) {
                if (status.toString().toLowerCase().indexOf(filterWord) < 0) {
                    passed = false;
                }
            });

            return passed;
        };

        Filter.prototype.isFilterActive = function () {
            var value = this.$scope.filterText;
            return value !== null && value !== undefined && value !== '';
        };

        return Filter;
    }

}]);

rdsApp.service('gridService', function ($http, $route) {
    var gs = this;

    gs.fetchingData = false;

    gs.startFetchingData = function() {
        gs.fetchingData = true;
    };

    gs.finishFetchingData = function() {
        gs.fetchingData = false;
    };
});

rdsApp.controller("ConfirmClearOfferModalController", function($scope, $modalInstance, callbackSuccess, data) {

	$scope.ok = function () {
		$modalInstance.close();
		callbackSuccess(data);
	};

	$scope.cancel = function () {
		$modalInstance.close();
	};
});

rdsApp.controller("CopyOfferPopupWindowController", function ($scope, $modalInstance, $route, $q, $modal, settingsService, orderService, cartService, profileService, articleService, cart) {
	var searchData = {};
	
	$scope.typeCreation='copy';

	cartService.removeCartFromSessionStorage();
	
	searchData.offerRefID = cart.refId;
	searchData.cartId = cart.orderRef;
	searchData.customerId = cart.customer;
	searchData.contact = {};
	searchData.contact.contactSequence = cart.contactSequence;

    settingsService.settings.offerRefID = searchData.offerRefID;
    settingsService.settings.orderJustLoaded = true;
    
    $scope.model = {};
    $scope.model.copyPrices = false;
    $scope.model.environmentCode = "";
    var previousEnvironmentCode = "";
    
    var deferred = $q.defer();
    var defer = articleService.searchArticles(searchData, deferred, true);
    
    $scope.offerInfoValidError = [];
    
    if (defer != null) {
        var promise = defer.promise;

        promise.then(function () {
        	$scope.model.environmentCode = settingsService.settings.customer.environmentCode;
    		previousEnvironmentCode = $scope.model.environmentCode;
        });
    }

    $scope.cart = cart;

    $scope.getConditions = function() {
        profileService.getConditions(settingsService.settings.customer.id, settingsService.settings.customer.environmentCode);
        //document.getElementById("btnFinish").value = "Copy offer";
    };

    $scope.finishedWizard = function() {
        $scope.offerInfoValidError = orderService.isOfferInfoValid();
        if ($scope.offerInfoValidError.length == 0) {
        	var data = {};
        	data.id = $scope.cart.orderRef;
        	data.copyPrices = $scope.model.copyPrices;
        	
        	
        	cartService.copyOffer(data, $scope.cart).then(function(data) {
        		var searchData = {};
            	searchData.offerRefID = data.refId;
            	searchData.cartId = data.cartId;
            	searchData.customerId = data.customerId;
            	searchData.contact = {};
            	searchData.contact.contactSequence = data.contactSequence;
            	articleService.searchArticles(searchData, undefined, true);
            	
            	$modalInstance.close();
            	//document.getElementById("btnFinish").value = "Make article selection";
        	}, function(error) {
        		$modal.open({
                    templateUrl: '/copyOfferError.inline',
                    controller: 'CopyOfferErrorPopupWindowController',
                    resolve: {
                    	data: function() {
                            return {message: "copy-offer-error"};
                        }
                    }
                });
        	});
        }
    };

    $scope.closePopup = function () {
        $modalInstance.close();
    };

    $scope.priceCodeChanged = function () {
        cartService.priceCodeChanged();
    };

    $scope.isOfferInfoValid = function () {
        orderService.isOfferInfoValid();
    };

    $scope.openFollowUp = function ($event, elementOpened) {
        $event.preventDefault();
        $event.stopPropagation();
        $scope.model[elementOpened] = true;
    };

    $scope.openValidTill = function ($event, elementOpened) {
        $event.preventDefault();
        $event.stopPropagation();
        $scope.model[elementOpened] = true;
    };

    $scope.getOrderService = function () {
        return orderService;
    };

    $scope.getSettingsService = function () {
        return settingsService;
    };

    $scope.getProfileService = function () {
        return profileService;
    };

    $scope.clearCustomerAndContactFields = function () {
		if($scope.model.environmentCode != previousEnvironmentCode) {
			$scope.getSettingsService().settings.customer = {};
			$scope.getSettingsService().contacts = [];
			$scope.getSettingsService().settings.contact = {};
			
			if($scope.model.environmentCode == "E")
				settingsService.settings.priceCode = "E";
			else // $scope.model.environmentCode == "C"
				settingsService.settings.priceCode = "C";
		}
		previousEnvironmentCode = $scope.model.environmentCode;
	};
	
	$scope.boolToString = function(bool) {
		return bool ? 'Yes' : 'No';
	};
	
	var today = new Date();

	$scope.dateOptions = {
		formatYear: 'yyyy',
		startingDay: 1,
		"min-date": new Date().setMonth(today.getMonth() -1)
	};
});

rdsApp.controller("DeleteOfferPopupWindowController", function ($http, $route, $scope, $modalInstance, cartService) {

    $scope.deleteOfferCancel = function() {
        $modalInstance.close();
    };

    $scope.deleteOfferOK = function () {
        window.sessionStorage.removeItem("selectedRow");
        cartService.deleteOffer();
        $modalInstance.close();
    };

});

rdsApp.controller("RequestSamplesInfoPopupWindowController", function($http, $route, $scope, $modalInstance, data) {
	$scope.data = data;
	
	$scope.close = function() {
		$modalInstance.close();
	};
});

rdsApp.controller("RequestSamplesPopupWindowController", function ($http, $route, $scope, $modalInstance, orderService, message, callback) {

    $scope.message = message;
    $scope.selectedRow = orderService.selectedRow;

    $scope.requestSamplesCancel = function() {
        $modalInstance.close();
    };

    $scope.requestSamplesOK = function () {
        jQuery("body").busy();
        orderService.requestSamples(orderService.selectedRow.refId, this).then(function(requested) {
        	if(!requested)
        		return;
        	
        	var today = new Date();
        	
        	var day = today.getDate();
        	var month = today.getMonth() + 1;
        	
        	if(day < 10) {day = "0" + day;}
        	if(month < 10) {month = "0" + month;}
        	
        	$scope.selectedRow.samplesRequestedDate = day + "/" + month + "/" + today.getFullYear();
        	$scope.selectedRow.hasRequestedSamples = true;
        	
        	if(callback)
        		callback();
        	
        });
        $modalInstance.close();
    };

    $scope.requestSamplesSuccessOK = function () {
        $modalInstance.close();
    };

});

rdsApp.controller("RequestErrorPopupWindowController", function($scope, $modalInstance, data) {
	$scope.data = data;
	
	$scope.close = function() {
		$modalInstance.close();
	};
});

rdsApp.controller("RequestCompositionPopupWindowController", function ($http, $route, $scope, $modalInstance, orderService, message) {

    $scope.message = message;

    $scope.requestCompositionCancel = function() {
        $modalInstance.close();
    };

    $scope.requestCompositionOK = function () {
        jQuery("body").busy();
        orderService.requestComposition(orderService.selectedRow.refId, this);
        $modalInstance.close();
    };

    $scope.requestCompositionSuccessOK = function () {
        $modalInstance.close();
    };

});

rdsApp.controller("CopyOfferErrorPopupWindowController", function($scope, $modalInstance, data) {
	$scope.data = data;
	
	$scope.close = function() {
		$modalInstance.close();
	};
});

rdsApp.controller("InvoiceGridController", ['$http', '$scope', '$modal', '$location', '$filter', 'translationService', 'cartService', 'settingsService', function ($http, $scope, $modal, $location, $filter, translationService, cartService, settingsService) {
    var controller = this;
    controller.allData = {};

    $scope.showGrid = false;
    $scope.docNrArray = [];
    $scope.statusArray = [];
    $scope.impressionDateArray = [];
    $scope.expirationDateArray = [];
    $scope.customFilterText = "";

    $scope.columnDefs = [
        {
            headerName: translationService.translate("PREVIOUS_INVOICE_IMPRESSION_DATE"),
            field: "impressiondate",
            filter: getCustomFilter(translationService, $scope.impressionDateArray, true, "node.data.impressiondate", $scope),
            width: 95
        },
        {
            headerName: translationService.translate("PREVIOUS_INVOICE_DOC_NR"),
            field: "docnr",
            filter: getCustomFilter(translationService, $scope.docNrArray, true, "node.data.docnr", $scope),
            width: 75
        },
        {
            headerName: translationService.translate("PREVIOUS_INVOICE_STATUS"),
            field: "status",
            filter: getCustomFilter(translationService, $scope.statusArray, true, "node.data.status", $scope),
            width: 75
        },
        {
            headerName: translationService.translate("PREVIOUS_INVOICE_ADDRESS"),
            field: "address",
            width: 300
        },
        {
            headerName: translationService.translate("PREVIOUS_INVOICE_DELIVERY_ADDRESS"),
            field: "deliveryaddress",
            width: 300
        },
        {
            headerName: translationService.translate("PREVIOUS_INVOICE_AMOUNT"),
            field: "amount",
            width: 125
        },
        {
            headerName: translationService.translate("PREVIOUS_INVOICE_SEASON"),
            field: "season",
            suppressMenu: true,
            width: 75
        },
        {
            headerName: translationService.translate("DOWNLOAD"),
            suppressSorting: true,
            suppressMenu: true,
            cellStyle: {'text-align': 'center'},
//            cellRenderer: mailCellRendererFunc,
            cellRenderer: downloadCellRendererFunc,
            width: 93
        }
    ];

//    function mailInvoiceClicked(invoiceData) {
//        settingsService.settings.invoiceToMail = invoiceData;
//        $modal.open({
//            templateUrl: '/mailInvoice.inline',
//            controller: 'PopupWindowController',
//            size: 255
//        });
//    }
//
//    function mailCellRendererFunc(params) {
//        // This is the method that we set here !!
//        params.$scope.mailInvoiceClicked = mailInvoiceClicked;
//        return '<a href="#/invoices" ng-click="mailInvoiceClicked(data)"><img src="/sites/all/static/image/download.png"/></a>';
//    }
//
    function downloadInvoiceClicked(invoiceData) {
//    	console.log(invoiceData);
//        settingsService.settings.invoiceToMail = invoiceData;
//        $modal.open({
//            templateUrl: '/mailInvoice.inline',
//            controller: 'PopupWindowController',
//            size: 255
//        });
    }

    function downloadCellRendererFunc(params) {
        console.log(params.data);
        // This is the method that we set here !!
        params.$scope.downloadInvoiceClicked = downloadInvoiceClicked;
        return '<a href="/action/' + site_code + '/' + language + '/invoice/download/' + params.data.id + '" target="_blank"><img src="/sites/all/static/image/download.png"/></a>';
    }

    $scope.gridOptions = {
        columnDefs: $scope.columnDefs,
        rowData: null,
        enableFilter: true,
        angularCompileFilters: true,
        angularCompileRows: true,
        enableSorting: false,
        rowSelection: "single",
        rowHeight: 125
    };

    $scope.$watch('customFilterText', function (newVal, oldVal) {
        if (newVal != oldVal) {
            if (newVal == undefined || newVal == '') {
                $scope.gridOptions.api.setDatasource(getDataSource(controller.allData));
            } else {
                $scope.gridOptions.api.setDatasource(getDataSource(controller.allData, newVal));
            }
            //$scope.gridOptions.api.onNewRows();
        }
    }, true);

    $http.get('/action/' + site_code + '/' + language + '/invoice/findheaders?timestamp=' + new Date().getTime()).success(function (data) {
        controller.allData = data;
        $scope.showGrid = data.length > 0;

        angular.forEach(data, function (obj, index) {
            if ($scope.docNrArray.indexOf(obj.docnr) == -1) {
                $scope.docNrArray.push(obj.docnr);
            }
            if ($scope.statusArray.indexOf(obj.status) == -1) {
                $scope.statusArray.push(obj.status);
            }
            if ($scope.impressionDateArray.indexOf(obj.impressiondate) == -1) {
                $scope.impressionDateArray.push(obj.impressiondate);
            }
            if ($scope.expirationDateArray.indexOf(obj.expirationdate) == -1) {
                $scope.expirationDateArray.push(obj.expirationdate);
            }
        });

        var dataSource = getDataSource(controller.allData);
        $scope.gridOptions.api.setDatasource(dataSource);
        //$scope.gridOptions.api.onNewRows();
    });


    function filterData(data, filterText) {
        var newData = [];
        angular.forEach(data, function (value, index) {
            if (value.docnr.toLowerCase().indexOf(filterText.toLowerCase()) != -1 ||
                value.impressiondate.indexOf(filterText) != -1 ||
                value.expirationdate.indexOf(filterText) != -1 ||
                value.address.toLowerCase().indexOf(filterText.toLowerCase()) != -1 ||
                value.deliveryaddress.toLowerCase().indexOf(filterText.toLowerCase()) != -1 ||
                value.amount.indexOf(filterText) != -1) {
                newData.push(value);
            }
        });

        return newData;
    }

    function getDataSource(data, filterText) {
        if (filterText != undefined && filterText != '' && filterText != null) {
            data = filterData(data, filterText);
        }

        return {
            data: data,
            rowCount: data.length,
            paginationPageSize: 5,
            overflowSize: 5,

            getRows: function (params) {
                var start = params.startRow;
                var finish = params.endRow;
                // take a chunk of the array, matching the start and finish times
                var rowsThisPage = data.slice(start, finish);
                var lastRow = -1;

                // see if we have come to the last page, and if so, return it
                if (data.length <= finish) {
                    lastRow = data.length;
                }
                params.successCallback(rowsThisPage, lastRow);
            }
        };
    }

    function getCustomFilter(translationService, options, isArray, nodeEvaluationString) {

        function Filter() {}

        Filter.prototype.init = function(params) {
            var t = this;
            t.$scope = params.$scope;
            this.translationService = translationService;
            this.options = options;
            this.isArray = isArray;
            this.nodeEvaluationString = nodeEvaluationString;

            //this.$scope = params.$scope;
            t.$scope.onFilterChanged = function () {
                $scope.gridOptions.api.setDatasource(getDataSource(controller.allData, this.filterText));
                //$scope.gridOptions.api.onNewRows();
            };
        };

        Filter.prototype.getGui = function () {
            if (!this.isArray) {
                return '<div style="padding: 4px; width: 200px;">' +
                    '<div style="font-weight: bold;">Contact Filter</div>' +
                    '<div><input style="margin: 4px 0px 4px 0px;" type="text" ng-model="filterText" ng-change="onFilterChanged()" placeholder="Full name search..."/></div>' +
                    '</div>';
            } else {
                var result = '<div style="padding: 4px; width: 200px;">' +
                    '<div style="font-weight: bold;">Status Filter</div>';
                if (this.options.length > 10) {
                    result += '<div><input style="margin: 4px 0px 4px 0px;" type="text" ng-model="filterText" ng-change="onFilterChanged()" placeholder="Full name search..."/></div>';
                }
                result += '<select ng-model="filterText" ng-change="onFilterChanged()">' +
                    '<option value=\'\'>' + this.translationService.translate("CHOOSE_ONE") + '</option>' +
                    this.getOptions() +
                    '</select>' +
                    '</div>';
                return result;
            }
        };

        Filter.prototype.getOptions = function () {
            var result = "";
            angular.forEach(this.options, function (value, index) {
                result += "<option value='" + value + "'>" + value + "</option>"
            });
            return result;
        };

        Filter.prototype.doesFilterPass = function (node) {
            var filterText = this.$scope.filterText;

            if (!filterText) {
                return true;
            }

            var status = eval(this.nodeEvaluationString);
            var passed = true;
            filterText.toLowerCase().split(" ").forEach(function (filterWord) {
                if (status.toString().toLowerCase().indexOf(filterWord) < 0) {
                    passed = false;
                }
            });

            return passed;
        };

        Filter.prototype.isFilterActive = function () {
            var value = this.$scope.filterText;
            return value !== null && value !== undefined && value !== '';
        };

        return Filter;
    }

}]);