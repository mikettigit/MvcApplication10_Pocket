/**
 * An object that allows us to inject modules into our main app
 *
 * Example:
 *      var rdsApp;
 *        rdsApp = angular.module('rdsApp', ['ngRoute', 'ngCookies', 'ngSanitize', 'ui.bootstrap'']);
 *      var modulesNeeded = [
 *          {service: "i18n", module: "translationModule"},
 *          {service: "order", module: "orderModule"},
 *          {service: "mail", module: "mailModule"}
 *      ];
 *      ModuleInjector.setRestCallData(site_code, language);
 *      ModuleInjector.decorateAppWithModules("rdsApp", modulesNeeded);
 *
 * @constructor empty
 */

function ModuleInjector() {
}

ModuleInjector.loadedModuleCalls = {};

ModuleInjector.modulesSize = 0;
ModuleInjector.addedModules = 0;

ModuleInjector.user = JSON.parse(localStorage.getItem("user"));

ModuleInjector.staticBaseUrl = "";

ModuleInjector.getStaticBaseUrl = function () {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', '/api/routing/static', false);
    xhr.onload = function() {
        if (xhr.status === 200) {
            console.log("Static url retrieved : " + xhr.responseText);
            var url = window.location.href;
            var arr = url.split("/");
            ModuleInjector.staticBaseUrl = arr[0] + xhr.responseText;
        } else {
            alert('Request failed.  Returned status of ' + xhr.status);
        }
    };
    xhr.send();
};

ModuleInjector.setRestCallData = function (websiteData, languageData) {
    ModuleInjector.websiteCode = websiteData;
    ModuleInjector.language = languageData;
};

/**
 * Used to create the basic auth header
 * @param user the user to create the header for
 */
ModuleInjector.setUser = function (user) {
    ModuleInjector.user = user;
    localStorage.setItem("user", JSON.stringify(user));
};

/**
 *
 * @param service the service that is specified in routing.properties --> available.services
 * @param serviceName the name of the rest call you want to perform --> call.rest.{serviceName}
 * @param addWebsiteAndLanguageToUrl if you want to pass the website and language as path parameters
 * @returns {{}} // TODO Later see skeleton that return from restCallRequest
 */
ModuleInjector.getRestCall = function (service, serviceName, addWebsiteAndLanguageToUrl) {
    var result = {};
    if (!ModuleInjector.loadedModuleCalls[service]) {
        var url = "/api/routing/" + service;
        if (addWebsiteAndLanguageToUrl) {
            url += "/" + ModuleInjector.websiteCode + "/" + ModuleInjector.language;
        }

        jQuery.ajax({
            cache: false,
            async: false,
            url: url,
            success: function (data) {
                ModuleInjector.loadedModuleCalls[service] = data;
            }
        });
    }

    var data = ModuleInjector.loadedModuleCalls[service];
    for (var i = 0; i < data.calls.length; i++) {
        if (data.calls[i].name == serviceName) {
            result = data.calls[i];
        }
    }

    return result;
};

/**
 *
 * @param service the service that is specified in routing.properties --> available.services
 * @param addWebsiteAndLanguageToUrl if you want to pass the website and language as path parameters
 * @returns the content path to the service module
 */
ModuleInjector.getContentPath = function (service, addWebsiteAndLanguageToUrl) {
    var result = {};
    if (!ModuleInjector.loadedModuleCalls[service]) {
        var url = "/api/routing/" + service;
        if (addWebsiteAndLanguageToUrl) {
            url += "/" + ModuleInjector.websiteCode + "/" + ModuleInjector.language;
        }

        jQuery.ajax({
            async: false,
            url: url,
            success: function (data) {
                ModuleInjector.loadedModuleCalls[service] = data;
            }
        });
    }

    return ModuleInjector.loadedModuleCalls[service].content;
};

ModuleInjector.decorateAppWithModules = function (appName, modulesNeeded) {
    console.log("Number of modules to load : " + modulesNeeded.length);
    ModuleInjector.modulesSize = modulesNeeded.length;

    if (ModuleInjector.modulesSize == 0) {
        checkModulesAreLoaded(appName);
    }

    for (var i = 0; i < modulesNeeded.length; i++) {
        if (!ModuleInjector.loadedModuleCalls[modulesNeeded[i].service]) {
            var url = "/api/routing/" + modulesNeeded[i].service + "/" + ModuleInjector.websiteCode + "/" + ModuleInjector.language;

            console.log("Retrieve service call : " + url);
            // Use jquery so we can do the call synchronous, we need this
            // data to build our screen !! Else we need to use promises and stuff
            // that is complex and doesn't work out of the box !!!
            jQuery.ajax({
                cache: false,
                url: url,
                indexValue: i,
                async: false,
                success: function (data) {
                    console.log("Service call retrieved : ",  data);
                    ModuleInjector.loadedModuleCalls[modulesNeeded[this.indexValue].service] = data;
                }
            });
        }

        var data = ModuleInjector.loadedModuleCalls[modulesNeeded[i].service];
        try {
        	ModuleInjector.loadJavascript(appName, data.javascriptFile, modulesNeeded[i].module);
        }
        catch(error) {
        	console.log(error);
        }
        ModuleInjector.loadCss(appName, data.cssFile, modulesNeeded[i].module);
    }
};

ModuleInjector.bootstrapAngular = function (appName) {
    console.log("Bootstrapping angular ...");
    angular.element(document).ready(function () {
        angular.bootstrap(document.body, [appName]);
    });
};

ModuleInjector.loadJavascript = function (appName, javascriptUrl, moduleName) {
    console.log("Loading '" + moduleName + "' for app '" + appName + "' on url : " + javascriptUrl);
    var xhr = new XMLHttpRequest();
    xhr.open('GET', javascriptUrl + "?" + ModuleInjector.websiteCode, false);
    xhr.onload = function() {
        if (xhr.status === 200) {
            console.log("Script retrieved : " + javascriptUrl);
            var scriptTag = document.createElement("script");
            scriptTag.innerHTML = xhr.responseText;
            scriptTag.type = "text/javascript";

            document.getElementsByTagName("head")[0].appendChild(scriptTag);

            angular.module(appName).requires.push(moduleName);

            ++ModuleInjector.addedModules;
            checkModulesAreLoaded(appName);
        } else {
            console.log("Could not retrieve " + moduleName + "(" + xhr.status + ").");

            ++ModuleInjector.addedModules;
            checkModulesAreLoaded(appName);
        }
    };
    
    try {
    	xhr.send();
    }
    catch(error) {
    	if(xhr.status == 0 || xhr.status == 404)
    		console.log("Could not retrieve " + moduleName + "(404).");
    	else {
    		console.log("Error loading " + moduleName + "(" + xhr.status + ")");
    		console.log(error.message);
    	}
    		
        ++ModuleInjector.addedModules;
        checkModulesAreLoaded(appName)
    }


    //Need to check first if JS-file exists with HEAD request.
    //AJAX SCRIPT cross-domain requests resulting in 404 will NOT be caught by anything.
    //jQuery.ajax({
    //    cache: false,
    //    async: false,
    //    url: javascriptUrl,
    //    dataType: "HEAD"
    //}).always(function (a, status, c) {
    //    if (status == "error") {
    //        console.log("Could not retrieve " + moduleName + "(404).");
    //
    //        ++ModuleInjector.addedModules;
    //        checkModulesAreLoaded(appName);
    //    } else {
    //        jQuery.ajax({
    //            cache: false,
    //            async: false,
    //            url: javascriptUrl,
    //            dataType: "script"
    //        }).done(function () {
    //            angular.module(appName).requires.push(moduleName);
    //        }).fail(function () {
    //            console.log("Error trying retrieving " + moduleName + ".");
    //        }).always(function () {
    //            ++ModuleInjector.addedModules;
    //            checkModulesAreLoaded(appName);
    //        });
    //    }
    //});
};

ModuleInjector.loadCss = function (appName, cssUrl, moduleName) {
    if (cssUrl != null) {
        jQuery.ajax({
            async: false,
            url: cssUrl + "?" + ModuleInjector.websiteCode,
            dataType: "GET"
        }).always(function (a, status, c) {
            if (status == "error") {
                console.log("Could not retrieve css for " + moduleName + "(" +  a.status + ").");
            } else {
            	var styleElement = document.createElement("style");
                styleElement.innerHTML = a.responseText;

                document.getElementsByTagName("head")[0].appendChild(styleElement);
            }
        });
    }
};

/**
 * Gets an config instance for a angular $http call
 *
 * @param url the url to call
 * @param method the method to use (GET, POST, ...)
 * @param data the data to send with the request (will only work with POST and maybe others, NOT GET)
 * @param stream boolean, indicates if we are getting a pdf file (stream)
 * @returns {*}
 */
ModuleInjector.getSecuredAjaxRequest = function (url, method, data, stream) {
    if (ModuleInjector.user == undefined || ModuleInjector.user.user == undefined) {
        return {
            method: method,
            url: url,
            headers: {
                'Content-Type': "application/json"
            },
            data: data
        };
    } else {
        var request = {
            method: method,
            url: url,
            headers: {
                'Authorization': ModuleInjector.makeBaseAuth(),
                'Content-Type': "application/json"
            }
        };

        if (data != undefined && data != null) {
            request.data = data;
        }

        if (stream) {
            request.responseType = "arraybuffer";
        }

        return request;
    }
};

ModuleInjector.makeBaseAuth = function () {
    var tok = ModuleInjector.user.user + ':' + ModuleInjector.user.password;
    var hash = window.btoa(tok);
    return "Basic " + hash;
};

function checkModulesAreLoaded(appName) {
    if (ModuleInjector.addedModules == ModuleInjector.modulesSize) {
        ModuleInjector.bootstrapAngular(appName);
    }
}